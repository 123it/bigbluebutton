<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
		xmlns:flexmdi="flexlib.mdi.containers.*"
		xmlns:logModule="org.bigbluebutton.modules.log.view.components.*"
		xmlns:views="org.bigbluebutton.main.views.*"
		xmlns:mate="http://mate.asfusion.com/"
		xmlns:maps="org.bigbluebutton.main.maps.*"
		xmlns:api="org.bigbluebutton.main.api.*"
		width="100%" height="100%"
		creationComplete="initializeShell()" initialize="allowCallBack()">
		
	<mate:Listener type="{ConfigEvent.CONFIG_EVENT}" method="setLogVisibility" />
	<mate:Listener type="{OpenWindowEvent.OPEN_WINDOW_EVENT}" method="handleOpenWindowEvent" />	
	<mate:Listener type="{CloseWindowEvent.CLOSE_WINDOW_EVENT}" method="handleCloseWindowEvent"/>
	<mate:Listener type="{AddUIComponentToMainCanvas.ADD_COMPONENT}" method="addComponentToCanvas" />
	<mate:Listener type="{AppVersionEvent.APP_VERSION_EVENT}" method="handleApplicationVersionEvent" />	
	<mate:Listener type="{ConnectionFailedEvent.USER_LOGGED_OUT}" method="handleLogout" />
	<mate:Listener type="{ConnectionFailedEvent.CONNECTION_FAILED}" method="attemptReconnect" />
	<mate:Listener type="{ConnectionFailedEvent.CONNECTION_CLOSED}" method="attemptReconnect"  />
	<mate:Listener type="{ConnectionFailedEvent.UNKNOWN_REASON}" method="attemptReconnect"  />
	<mate:Listener type="{ConnectionFailedEvent.CONNECTION_REJECTED}" method="attemptReconnect"  />

	<api:APIEventMap />
	
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import flash.events.MouseEvent;
			import flash.events.TimerEvent;
			import flash.external.*;
			import flash.utils.Timer;
			
			import flexlib.mdi.containers.MDIWindow;
			import flexlib.mdi.effects.effectsLib.MDIVistaEffects;
			
			import mx.collections.ArrayCollection;
			import mx.containers.HBox;
			import mx.containers.TitleWindow;
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.core.Application;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			
			import org.bigbluebutton.common.IBbbModuleWindow;
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.main.events.AddUIComponentToMainCanvas;
			import org.bigbluebutton.main.events.AppVersionEvent;
			import org.bigbluebutton.main.events.CloseWindowEvent;
			import org.bigbluebutton.main.events.ConfigEvent;
			import org.bigbluebutton.main.events.ModuleLoadEvent;
			import org.bigbluebutton.main.events.OpenWindowEvent;
			import org.bigbluebutton.main.events.PortTestEvent;
			import org.bigbluebutton.main.events.SuccessfulLoginEvent;
			import org.bigbluebutton.main.model.users.events.ConnectionFailedEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			import org.bigbluebutton.util.logging.Logger;
            
            private var _gWindow:TitleWindow;
            private var _timRaiseHand:Timer;
            private var _timChat:Timer;
			private var _timNewUser:Timer;
            private const TIMER_INTERVAL:int    = 1000;
            private const NOTIFY_DURATION:int   = 20;
			private const NOTIFY_WINDOW_WIDTH:int		= 200;
			private const TOP_NOTIFY_WINDOW_BORDER:int 	= 15;
			private const NOTIFICATION_LABEL_WIDTH:int 	= 150;
			private const CHAT_NOTIFICATION_LENGTH:int 	= 25;
            private var _notifyRaiseNum:int   	= 0;
            private var _isPresentationFullScr:Boolean      = false;
            private var _isEnableChatNotification:Boolean   = true;
            private var _hBoxNotification:HBox;
			
			private var globalDispatcher:Dispatcher;
			
			private var dispState:String; //full-screen?
			private var images:Images = new Images();
			private var stoppedModules:ArrayCollection;
			
			private var logs:Logger = new Logger();
			private var logWindow:LogWindow;
			
			private var logoutWindow:LoggedOutWindow;
			private var connectionLostWindow:ConnectionLostWindow;
			
			// LIVE or PLAYBACK
			private var _mode:String = 'LIVE';
			[Bindable] public var appVersion:String = '0.7';
			private var localeVersion:String = 'old';
			[Bindable] public var numberOfModules:int = 0;
			
			[Bindable] private var fullscreen_icon:Class = images.full_screen;
			[Bindable] private var logs_icon:Class = images.table;
			[Bindable] private var reset_layout_icon:Class = images.layout;
			
			[Bindable] private var _handIcon:Class    = images.raisehand;
			[Bindable] private var _disable_chat_notify:Class = images.disable_chat_notify;
			[Bindable] private var _enable_chat_notify:Class  = images.enable_chat_notify;
			
			// icon for new user notification box
			[Bindable] private var _userIcon:Class    = images.user;
			
			public function get mode():String {
				return _mode;
			}
			
			protected function initializeShell():void {		
				trace('Initializing');	
				globalDispatcher = new Dispatcher();
			}

			protected function initFullScreen():void {				
				/* Set up full screen handler. */
				stage.addEventListener(FullScreenEvent.FULL_SCREEN, fullScreenHandler);
				dispState = stage.displayState;
			}					
			
			private function handleApplicationVersionEvent(event:AppVersionEvent):void {
				appVersion = event.appVersion;
				localeVersion = event.localVersion;
				checkLocaleVersion(localeVersion);
			}
			
			private function fullScreenHandler(evt:FullScreenEvent):void {
				dispState = stage.displayState + " (fullScreen=" + evt.fullScreen.toString() + ")";
				if (evt.fullScreen) {
					LogUtil.debug("Switching to full screen");
					/* Do something specific here if we switched to full screen mode. */
				
				} else {
					LogUtil.debug("Switching to normal screen");
					/* Do something specific here if we switched to normal mode. */
				}
			}			
			
			private function openLogWindow():void {
				if (logWindow == null){
					logWindow = new LogWindow();
					logWindow.logs = logs;
				}
				mdiCanvas.windowManager.add(logWindow);
				mdiCanvas.windowManager.absPos(logWindow, 50, 50);
				logWindow.width = mdiCanvas.width - 100;
				logWindow.height = mdiCanvas.height - 100;
			}
			
			private function toggleFullScreen():void{
	   			LogUtil.debug("Toggling fullscreen");
	   			try {
					switch (stage.displayState) {
						case StageDisplayState.FULL_SCREEN:
							LogUtil.debug("full screen mode");
							// If already in full screen mode, switch to normal mode.
							stage.displayState = StageDisplayState.NORMAL;
							break;
						default:
							LogUtil.debug("Normal screen mode");
							// If not in full screen mode, switch to full screen mode.
							stage.displayState = StageDisplayState.FULL_SCREEN;
							break;
					}
				} catch (err:SecurityError) {
					// ignore
				}
	   		}	
	   		
	   		private function handleOpenWindowEvent(event:OpenWindowEvent):void {
	   			
	   			var window:IBbbModuleWindow = event.window;
	   			mdiCanvas.addWindow(window);
	   		}
	   		
	   		private function handleCloseWindowEvent(event:CloseWindowEvent):void {
	   			var window:IBbbModuleWindow = event.window;
				mdiCanvas.removeWindow(window);
	   		}
	   		
	   		private function resetLayout():void{
	   			mdiCanvas.resetWindowLayout();
	   		}
	   		
	   		private function addComponentToCanvas(e:AddUIComponentToMainCanvas):void{
	   			mdiCanvas.addChild(e.component);
	   		}
	   		
	   		public function checkLocaleVersion(localeVersion:String):void {	   			
	   			Alert.okLabel ="OK";
				var version:String = "old-locales";
				version = ResourceUtil.getInstance().getString('bbb.mainshell.locale.version');
				LogUtil.debug("Locale from config=" + localeVersion + ", from locale file=" + version);

				if ((version == "old-locales") || (version == "") || (version == null)) {
					wrongLocaleVersion();
				} else {
					if (version != localeVersion) wrongLocaleVersion();
				}	   			
	   		}
	   		
	   		private function wrongLocaleVersion():void {
				var localeWindow:OldLocaleWarnWindow = OldLocaleWarnWindow(PopUpManager.createPopUp(mdiCanvas, OldLocaleWarnWindow, false));

				var point1:Point = new Point();
	        	// Calculate position of TitleWindow in Application's coordinates. 
	        	point1.x = 400;
	        	point1.y = 300;                
	        	point1 = mdiCanvas.localToGlobal(point1);
				localeWindow.x = point1.x + 25;
				localeWindow.y = point1.y + 25;	
            }
			
			private function handleLogout(e:ConnectionFailedEvent):void{
				if (logoutWindow != null) return;
				logoutWindow = LoggedOutWindow(PopUpManager.createPopUp( mdiCanvas, LoggedOutWindow, false));
				
				var point1:Point = new Point();
				// Calculate position of TitleWindow in Application's coordinates. 
				point1.x = 400;
				point1.y = 300;                
				point1 = localToGlobal(point1);
				logoutWindow.x = point1.x + 25;
				logoutWindow.y = point1.y + 25;	
				if (e is ConnectionFailedEvent) logoutWindow.setReason((e as ConnectionFailedEvent).type);
				else logoutWindow.setReason("You have logged out of the conference");
				
				mdiCanvas.removeAllWindows(); 
			}
			
			private function attemptReconnect(e:ConnectionFailedEvent):void{
				if (connectionLostWindow != null) return;
				connectionLostWindow = ConnectionLostWindow(PopUpManager.createPopUp( mdiCanvas, ConnectionLostWindow, true));
				connectionLostWindow.x = mdiCanvas.width/2 - connectionLostWindow.width/2;
				connectionLostWindow.y = mdiCanvas.height/2 - connectionLostWindow.height/2;
			}
			
			private function setLogVisibility(e:ConfigEvent):void{
				logBtn.visible = e.config.showDebug;
			}
			
            /*****************************************************************************
            ;  changeChatNotificationStatus
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ;   This routine is use to switch enable or disable of chat notification
            ;   while presentation in fullscreen mode.
            ;
            ; RETURNS : N/A
            ;
            ; INTERFACE NOTES
            ; 
            ;       INPUT : N/A
            ; 
            ; IMPLEMENTATION
            ;  		check the current enable or disable chat notification and
			;		change the status
            ; HISTORY
            ; __date__ :        PTS:  		Description
            ; 2010.12.06       				notity chat message when presentation
			;								window in full screen mode
            ;
            ******************************************************************************/
            private function changeChatNotificationStatus():void{
            
                // determine that chat notification is enbaled.
                if( true == _isEnableChatNotification)
                {
                    // change chat notification button icon and tooltip
                    btnEnbChatAlert.toolTip     = ResourceUtil.getInstance().getString('bbb.mainshell.enableChatNotification');
                    _isEnableChatNotification   = false;
                    btnEnbChatAlert.setStyle("icon",_enable_chat_notify); 
                }
                else{
                    // change chat notification button icon and tooltip
                    btnEnbChatAlert.toolTip     = ResourceUtil.getInstance().getString('bbb.mainshell.disableChatNotification');
                    _isEnableChatNotification   = true;
                    btnEnbChatAlert.setStyle("icon",_disable_chat_notify); 
                }
            }
            /*
             * END: changeChatNotificationStatus
             */

            /*****************************************************************************
            ; allowCallBack
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ;   This routine is use to add function that will be call from javascript.
            ;
            ; RETURNS : N/A
            ;
            ; INTERFACE NOTES
            ; 
            ;       INPUT : N/A
            ;
            ; 
            ; IMPLEMENTATION
            ;  	adding call back function to ExternalInterface
            ; HISTORY
            ; __date__ :        PTS:		Description  
            ; 2010.12.06        			new chat, new user, raise hand
			;								notification when the presenation
			;								window in full screen mode.
            ;
            ******************************************************************************/
            public function allowCallBack():void
            {
                // determine that ExternalInterface object supported.
                if (true == ExternalInterface.available)
                {
                    // add function that can call back from javascript
                    ExternalInterface.addCallback("showButtonCallBack", showHideButton);
                    ExternalInterface.addCallback("raiseHandCallback", participantRaisedHand);
                    ExternalInterface.addCallback("newChatCallback", handleNewChat);
                    ExternalInterface.addCallback("handleNewUserCallback", handleNewUser);
                }
            }
            /***
            ; END: allowCallBack
            ****/
             
            /*****************************************************************************
            ;  showHideButton
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ;   This routine is use to display enable or disable chat notification button.
            ;
            ; RETURNS : N/A
            ;
            ; INTERFACE NOTES
            ; 
            ;       INPUT
            ;           isVisible (Boolean): status of presentation window "if in full 
			;								  screen mode the status is isVisible".
            ; 
            ; IMPLEMENTATION
            ;  	show or hide enable chat notification depending on the status.
            ; HISTORY
            ; __date__ :        PTS:		Description  
            ; 2010.12.06        			new chat notification when presentation
			;								window in full screen mode.
            ;
            ******************************************************************************/
            public function showHideButton(isVisible:Boolean):void
            {
                _isPresentationFullScr       = isVisible;
                btnEnbChatAlert.visible      = isVisible;
            }
            /*
             * END: showHideButton
             */
            
            /*****************************************************************************
            ;  participantRaisedHand
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ;   This routine is use to call when participant raise hand to notify 
            ;   raise hand event while presentation window in full screen mode.
            ;
            ; RETURNS : N/A
            ;
            ; INTERFACE NOTES
            ;   INPUT
            ;       name: the name of participant that raised hand.
            ; 
            ; IMPLEMENTATION
            ;   use Timer to display blink message and hand icon
            ;
            ; HISTORY
            ; __date__ :        PTS:  		Description
            ; 2010.12.06        			raise hand notificatin when presentation
			;								window in full screen mode.
            ;
            ******************************************************************************/
            public function participantRaisedHand(name:String):void
            {
				if ( null == name ){
					LogUtil.error("The parameter 'name' for handle paticipant raise" +
						" hand notification is NULL");
					return;
				}
                // determine the presentation window not in
                // full screen mode.
                if ( false == _isPresentationFullScr)
                {
                    return;
                }
                // determine timer object to stop it
                if (null != _timRaiseHand)
                {
                    _timRaiseHand.stop();
                    _notifyRaiseNum = 0;
                }
                lblNotification.text         = name;
                lblNotification.visible      = false;
                btnEnbRaiseHandAlert.visible = false;
                
                // initialize and start timer.
                _timRaiseHand = new Timer(TIMER_INTERVAL);
				if ( null == _timRaiseHand ){
					LogUtil.error("Creating Timer object for raise hand notification is NULL");
					return;
				}
                _timRaiseHand.addEventListener(TimerEvent.TIMER, updateTimer);
                _timRaiseHand.start();
            }
            /*
             *  END: participantRaisedHand
             */
             
            /*****************************************************************************
            ;  updateTimer
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ;   This routine is use to call by Timer display blink message 
            ;   with hand icon. 
            ;
            ; RETURNS : N/A
            ;
            ; INTERFACE NOTES
            ;   INPUT
            ;       evt :   TimerEvent object.
            ; 
            ; IMPLEMENTATION
            ;		blink raise hand notification message
            ; HISTORY
            ; __date__ :        PTS:		Description  
            ; 2010.12.06        			raise hand notificatin when presentation
			;								window in full screen mode.
            ;
            ******************************************************************************/
            private function updateTimer(evt:TimerEvent):void
            {
                // determine the timer step 'equal to NOTIFY_DURATION'
                if (NOTIFY_DURATION == _notifyRaiseNum)
                {
                    // hide raiseHand icon and label
                    lblNotification.visible = false;
                    btnEnbRaiseHandAlert.visible = false;
                    
                    // stop the timer.
                    if ( null != _timRaiseHand ){
                        _timRaiseHand.stop();
                    }
                    _notifyRaiseNum = 0;
                    return;
                } 
                lblNotification.visible      = !lblNotification.visible;
                btnEnbRaiseHandAlert.visible = !btnEnbRaiseHandAlert.visible;
                _notifyRaiseNum += 1;
            }
            /*
             *  END: updateTimer
             */
             
            /*****************************************************************************
            ;  handleNewChat
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ;   This routine is use to call when participant raise hand to notify 
            ;   new chat event while presentation window in full screen mode. 
            ;
            ; RETURNS : N/A
            ;
            ; INTERFACE NOTES
            ;   INPUT
            ;       sender  :   the name of sender.
            ;       message :   chat message.
            ; 
            ; IMPLEMENTATION
            ;		stop the other notification and start to blink the 
			;		new chat notification
            ; HISTORY
            ; __date__ :        PTS:		Description  
            ; 2010.12.06        			new chat notification when presentation
			;								window in full screen mode.
            ;
            ******************************************************************************/
            private function handleNewChat(sender:String,message:String):void
            {
				if ( null == sender ){
					LogUtil.error("The parameter 'sender' for handle new chat notification" +
						" is NULL");
					return;
				}
				if ( null == message ){
					LogUtil.error("The parameter 'message' for handle new chat notification" +
						"is NULL");
					return;
				}
                // check presentation window if not full screen
                // or chat notification not enable, function return
                if ( false == _isPresentationFullScr
                        ||
                     false == _isEnableChatNotification
                     )
                {
                    return;
                }
                if (null != _timChat)
                {
                    // check '_timChat' Timer and stop if it's starting.
                    _timChat.stop();
                    PopUpManager.removePopUp(_gWindow);
                }
                if ( null != _timNewUser )
                {
                    // new user notification running, stop it.
                    _timNewUser.stop();
                    PopUpManager.removePopUp(_gWindow);
                }
                
                // initialize chat notification window
                showWindow(sender,message);
                
                // initialize Timer and start to blink chat notification
                _timChat = new Timer(TIMER_INTERVAL, NOTIFY_DURATION);
				if ( null == _timChat ){
					LogUtil.error("Creating Timer object for handle new user notification is NULL");
					return;
				}
				_timChat.addEventListener(TimerEvent.TIMER, function(evt:TimerEvent):void{
					_hBoxNotification.visible    = !_hBoxNotification.visible;
					}
				);
                _timChat.start();
                
            }
            /*
             *  END: handleNewChat
             */

            /*****************************************************************************
            ;  showWindow
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ;   This routine is use to initialize chat notification window. 
            ;
            ; RETURNS : N/A
            ;
            ; INTERFACE NOTES
            ;   INPUT
            ;       name   :    the name of participant.
            ;       message:    new chat message.
            ; 
            ; IMPLEMENTATION
            ;   use PopupManager to create popup chat notification window
            ;
            ; HISTORY
            ; __date__ :        PTS:		Description  
            ; 2010.12.06        			new chat notification when presentation
			;								window in full screen mode.
            ;
            ;
            ******************************************************************************/
            private function showWindow(name:String,message:String):void{
				if ( null == name ){
					LogUtil.error("The parameter 'name' for creating new chat notification" +
						" window is NULL");
					return;
				}
				if ( null == message ){
					LogUtil.error("The parameter 'message' for creating new chat notification" +
						" window is NULL");
					return;
				}
                var lblChatNotificaton:Label    = new Label;
                var lNotificationMsg:String      = name + " : " + message;
                _hBoxNotification    = new HBox;
                   
                // determine the message length is > CHAT_NOTIFICATION_LENGTH character
                if ( CHAT_NOTIFICATION_LENGTH < lNotificationMsg.length )
                {
                    // keep message to display only CHAT_NOTIFICATION_LENGTH character.
                    lNotificationMsg     = lNotificationMsg.substring(0,CHAT_NOTIFICATION_LENGTH) + "....";
                }
                lblChatNotificaton.text = lNotificationMsg;
                _hBoxNotification.addChild(lblChatNotificaton);
                
                // initialize and add message to notification window.
                _gWindow         = TitleWindow(PopUpManager.createPopUp(this, TitleWindow));
				if ( null == _gWindow ){
					LogUtil.error("Creating TitleWindow object for notification window is NULL");
					return;
				}
                _gWindow.title  = 'New Chat';
                _gWindow.addChild(_hBoxNotification); 
                _gWindow.width  = NOTIFY_WINDOW_WIDTH;
                _gWindow.horizontalScrollPolicy="off";
                
                // set position
                _gWindow.x   = mdiCanvas.width  - _gWindow.width;
                _gWindow.y   = mdiCanvas.height - _gWindow.height + TOP_NOTIFY_WINDOW_BORDER; 
                _gWindow.showCloseButton = true;
                _gWindow.addEventListener(CloseEvent.CLOSE, function(evt:CloseEvent):void{
					PopUpManager.removePopUp(_gWindow);
					}
				);
            }
            /*
             *  END: showWindow
             */

            /*****************************************************************************
            ;  createNewUserNotificationWindow
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ;   This routine is use to initialize new participant joined 
            ;   notification window. 
            ;
            ; RETURNS : N/A
            ;
            ; INTERFACE NOTES
            ;   INPUT
            ;       uname: the name of new participant.
            ;
            ; IMPLEMENTATION
            ;   use PopupManager to create popup notification window
            ;
            ; HISTORY
            ; __date__ :        PTS:    Description
            ; 2010.12.16                new participant joined notification when
			;							presentatin window in full screen mode.
            ;
            ******************************************************************************/
            private function createNewUserNotificationWindow(uname:String) : void{
                
				if ( null == uname ){
					LogUtil.error("The parameter 'uname' for creating new user" +
						"notification is NULL");
					return;
				}
                // initialize controls to add to notification window
                var imgUserIcon:Image   = new Image;
                var lblNotificationText:Label = new Label;
                _hBoxNotification    = new HBox;
                
                imgUserIcon.source      = _userIcon;
                lblNotificationText.text= uname + " : joined";
                lblNotificationText.width   = NOTIFICATION_LABEL_WIDTH;
                
                _hBoxNotification.addChild(imgUserIcon);
                _hBoxNotification.addChild(lblNotificationText);
                
                // initialize and add controls to notification window.
                _gWindow = TitleWindow(PopUpManager.createPopUp(this, TitleWindow));
				if ( null == _gWindow ){
					LogUtil.error("Creating TitleWindow object for new user" +
						" notification is NULL");
					return;
				}
                _gWindow.title = 'Notification';
                _gWindow.addChild(_hBoxNotification);
                _gWindow.width   = NOTIFY_WINDOW_WIDTH;
                _gWindow.horizontalScrollPolicy="off";
                    
                // set position
                _gWindow.x   = mdiCanvas.width  - _gWindow.width;
                _gWindow.y   = mdiCanvas.height - _gWindow.height + TOP_NOTIFY_WINDOW_BORDER; 
                _gWindow.showCloseButton = true;
                _gWindow.addEventListener(CloseEvent.CLOSE, function(evt:CloseEvent):void{
					PopUpManager.removePopUp(_gWindow);
					}
				); 
            }
            /*
             *  END: createNewUserNotificationWindow
             */

            /*****************************************************************************
            ;  handleNewUser
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ;   This routine is use to call when new participant joined to notify 
            ;   other participant while presentation window in full screen mode. 
            ;
            ; RETURNS : N/A
            ;
            ; INTERFACE NOTES    
            ;   INPUT
            ;       uname: the name of new participant.
            ;
            ; IMPLEMENTATION
			;		clear the existing notification and blink the new
			;		user joined notification
            ;
            ; HISTORY
            ; __date__ :        PTS:    Description
            ; 2010.12.16                new participant joined notification
            ;
            ******************************************************************************/
            private function handleNewUser(uname:String) : void{
				if ( null == uname ){
					LogUtil.error("The parameter 'uname' for handle new user " +
						"notification is NULL");
					return;
				}
                // determine the presentation window not in full
                // screen mode.
                if ( false == _isPresentationFullScr ){
                    return;
                }
                if ( null != _timChat ){
                    // stop '_timChat' timer.
                    _timChat.stop();
                    PopUpManager.removePopUp(_gWindow);
                }
                if ( null != _timNewUser ){
                    // timer already running
                    _timNewUser.stop();
                    PopUpManager.removePopUp(_gWindow);
                }
                // create notification window
                createNewUserNotificationWindow(uname);
                
                // initialize and start time
                _timNewUser = new Timer(TIMER_INTERVAL, NOTIFY_DURATION);
				if ( null == _timNewUser ){
					LogUtil.error("Creating TimerObject for new user notification is NULL");
					return;
				}
				_timNewUser.addEventListener(TimerEvent.TIMER, function(evt:TimerEvent):void{
					_hBoxNotification.visible = !_hBoxNotification.visible;
					}
				);
                _timNewUser.start();
            }
            /*
             *  END: handleNewUser
             */
             
		]]>
	</mx:Script>
			
	<views:MainToolbar id="toolbar" dock="true" width="100%" height="30" visible="false" verticalAlign="middle"/>
	<views:MainCanvas id="mdiCanvas" horizontalScrollPolicy="off" verticalScrollPolicy="off" effectsLib="{flexlib.mdi.effects.effectsLib.MDIVistaEffects}" width="100%" height="100%">
		<views:LoadingBar id="progressBar" x="{this.width/2 - progressBar.width/2}" y="{this.height/2 - progressBar.height/2}" width="{this.width/2}" />
	</views:MainCanvas>	
	<mx:ControlBar width="100%" height="20" paddingTop="0">		
	  	<mx:Label text="{ResourceUtil.getInstance().getString('bbb.mainshell.copyrightLabel2',[appVersion])}" id="copyrightLabel2"/>
	 	<mx:Spacer width="20"/>
		<mx:Spacer width="100%"/> 
        
		<mx:Label text="" visible="false" id="lblNotification" color="#FFFFFF"/>
		<mx:Button width="20" height="20" toolTip="" visible="false" id="btnEnbRaiseHandAlert" icon="{_handIcon}" />
		<mx:Button width="20" height="20" toolTip="{ResourceUtil.getInstance().getString('bbb.mainshell.disableChatNotification')}" visible="false" id="btnEnbChatAlert" icon="{_disable_chat_notify}" click="changeChatNotificationStatus()" />
	    
		<mx:Button width="20" height="20" toolTip="{ResourceUtil.getInstance().getString('bbb.mainshell.logBtn.toolTip')}" id="logBtn" icon="{logs_icon}" click="openLogWindow()" />
		<mx:Button width="20" height="20" toolTip="{ResourceUtil.getInstance().getString('bbb.mainshell.resetLayoutBtn.toolTip')}" id="btnResetLayout" icon="{reset_layout_icon}" click="resetLayout()" />
	</mx:ControlBar>
</mx:VBox>
