<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:mate="http://mate.asfusion.com/"
    	title="{ResourceUtil.getInstance().getString('bbb.chat.openfile.title')}"
    	x="168" y="86" layout="absolute" width="300" height="500" initialize="initData()"
        >
    
    
    <mate:Listener type="{cCHAT_HistoryFileListEvent.DISPLAY_FILE_LIST}" method="handleDisplayFile" />
    <mate:Listener type="{cCHAT_HistoryCommandEvent.SAVE_FILE}" method="handleSaveFile" />
    <mx:Script>
		<![CDATA[
        
        import com.asfusion.mate.events.Dispatcher;
        
        import flash.events.IEventDispatcher;
        import flash.net.FileReference;
        import flash.events.MouseEvent;


        import mx.collections.ArrayCollection;
        import mx.events.ListEvent;
        import org.bigbluebutton.main.api.UserManager;
        import org.bigbluebutton.main.model.users.Conference;
        
        import org.bigbluebutton.modules.chat.events.cCHAT_HistoryFileListEvent ;
        import org.bigbluebutton.modules.chat.events.cCHAT_HistoryCommandEvent ;
        import org.bigbluebutton.modules.chat.events.cCHAT_HistoryWindowEvent ;
        
        import org.bigbluebutton.util.i18n.ResourceUtil;
        import mx.controls.Alert ;
        import mx.managers.PopUpManager;
        
        private var conference:Conference = UserManager.getInstance().getConference();
        private var fileName:String ;
        private var msg:String ;
        private var file:FileReference = new FileReference();
        private var globalDispatcher:Dispatcher = new Dispatcher();
        
        public var isPrivate:Boolean = false ;
        
        [Bindable] public var files:ArrayCollection = new ArrayCollection();
        [Bindable] private var isSelected:Boolean = false ;

        
        /*****************************************************************************
        ;  initData
        ;----------------------------------------------------------------------------
        ; DESCRIPTION
        ;   this routine is used to initialize when the file load, add listener 
        ;   to button
        ; RETURNS : N/A
        ;
        ; INTERFACE NOTES
        ;   INPUT
        ; 
        ; IMPLEMENTATION
        ;  add event listener to dowloadBtn
        ; HISTORY
        ; __date__ :        PTS:            Description
        ; 13-01-2011
        ******************************************************************************/
        private function initData():void{
            this.downloadBtn.addEventListener(MouseEvent.MOUSE_OVER,doMouseOver);
            this.downloadBtn.addEventListener(MouseEvent.CLICK,doMouseClick);
        }/** END FUNCTION 'initData' **/
            
        /*****************************************************************************
        ;  doMouseOver
        ;----------------------------------------------------------------------------
        ; DESCRIPTION
        ;   this routine is used handle mouse over event
        ;   
        ; RETURNS : N/A
        ;
        ; INTERFACE NOTES
        ;   INPUT
        ;   e:  MouseEvent
        ; IMPLEMENTATION
        ;  dispatch event to load the file content
        ; HISTORY
        ; __date__ :        PTS:            Description
        ; 13-01-2011
        ******************************************************************************/
        private function doMouseOver(e:MouseEvent):void{
            var event:cCHAT_HistoryCommandEvent ;
            
            if ( false == isPrivate){
                event  = new cCHAT_HistoryCommandEvent(cCHAT_HistoryCommandEvent.OPEN_FILE) ;
            }else{
                event  = new cCHAT_HistoryCommandEvent(cCHAT_HistoryCommandEvent.OPEN_PRIVATE_FILE) ;
                event.userid = String(conference.me.userid) ;
            }
            event.fileName = this.fileName ;
            globalDispatcher.dispatchEvent(event) ;
        }/** END FUNCTION 'doMouseOver' **/
        
        /*****************************************************************************
        ;  doMouseClick
        ;----------------------------------------------------------------------------
        ; DESCRIPTION
        ;   this routine is used handle mouse click event
        ;   
        ; RETURNS : N/A
        ;
        ; INTERFACE NOTES
        ;   INPUT
        ;   e:  MouseEvent
        ; IMPLEMENTATION
        ;  open save dialog window
        ; HISTORY
        ; __date__ :        PTS:            Description
        ; 13-01-2011
        ******************************************************************************/
        private function doMouseClick(e:MouseEvent):void{
            file.save(this.msg,this.fileName);
        }/** END FUNCTION 'doMouseClick' **/
        
        /*****************************************************************************
        ;  onItemRollOver
        ;----------------------------------------------------------------------------
        ; DESCRIPTION
        ; 
        ;   
        ; RETURNS : N/A
        ;
        ; INTERFACE NOTES
        ;   INPUT
        ; 
        ; IMPLEMENTATION
        ; 
        ; HISTORY
        ; __date__ :        PTS:            Description
        ; 13-01-2011
        ******************************************************************************/
        private function onItemRollOver(event:ListEvent):void{
			/* Do something */
        }/** END FUNCTION 'onItemRollOver' **/
        
        /*****************************************************************************
        ;  onItemRollOut
        ;----------------------------------------------------------------------------
        ; DESCRIPTION
        ;   
        ;   
        ; RETURNS : N/A
        ;
        ; INTERFACE NOTES
        ;   INPUT
        ;   
        ; IMPLEMENTATION
        ;  
        ; HISTORY
        ; __date__ :        PTS:            Description
        ; 13-01-2011
        ******************************************************************************/
        private function onItemRollOut(event:ListEvent):void{
			/* Do something */
		} /** END FUNCTION 'onItemRollOut' **/
              
        /*****************************************************************************
        ;  closeHistoryWindow
        ;----------------------------------------------------------------------------
        ; DESCRIPTION
        ;   this routine is used close the dialog of list file
        ;   
        ; RETURNS : N/A
        ;
        ; INTERFACE NOTES
        ;   INPUT
        ;   
        ; IMPLEMENTATION
        ;  remove pop up window
        ; HISTORY
        ; __date__ :        PTS:            Description
        ; 13-01-2011
        ******************************************************************************/
        private function closeHistoryWindow():void{    
            PopUpManager.removePopUp(this);
        } /** END FUNCTION 'closeHistoryWindow' **/
        
        /*****************************************************************************
        ;  handleDisplayFile
        ;----------------------------------------------------------------------------
        ; DESCRIPTION
        ;   this routine is used handle the event from chatView, load the file list 
        ;   and display in DataGrid
        ;   
        ; RETURNS : N/A
        ;
        ; INTERFACE NOTES
        ;   INPUT
        ;   e:  cCHAT_HistoryFileListEvent
        ; IMPLEMENTATION
        ;  get data from ChatHistoryFileListEvent and add to DataGrid
        ; HISTORY
        ; __date__ :        PTS:            Description
        ; 13-01-2011
        ******************************************************************************/
        private function handleDisplayFile(e:cCHAT_HistoryFileListEvent):void{
            var i:int = 0 ;
            if ( null == e.fileList ) return ;
            //files = null ;
            
            var fileList:Array = e.fileList as Array ;
            for ( i=0 ; i < fileList.length ; i++ ){
                files.addItem(fileList[i]) ;
            }
        } /** END FUNCTION 'handleDisplayFile' **/
        
        
        /*****************************************************************************
        ;  handleSaveFile
        ;----------------------------------------------------------------------------
        ; DESCRIPTION
        ;   this routine is used handle mouse click event
        ;   
        ; RETURNS : N/A
        ;
        ; INTERFACE NOTES
        ;   INPUT
        ;   e:  cCHAT_HistoryCommandEvent
        ; IMPLEMENTATION
        ;  get data from ChatHistoryCommandEvent and pass it to msg variable
        ; HISTORY
        ; __date__ :        PTS:            Description
        ; 13-01-2011
        ******************************************************************************/
        private function handleSaveFile(e:cCHAT_HistoryCommandEvent):void{
            var messages:Array = e.message as Array;
            this.fileName = e.fileName ;
           
            msg = "###  Chat History ### \n" ;
            for( var i:int=0; i<messages.length; i++ ){
                this.msg = this.msg + messages[i] + "\n" ;
            }
        } /** END FUNCTION 'handleSaveFile' **/
        
        /*****************************************************************************
        ;  fileSelectEvent
        ;----------------------------------------------------------------------------
        ; DESCRIPTION
        ;   this routine is used handle the select event from DataGrid
        ;   
        ; RETURNS : N/A
        ;
        ; INTERFACE NOTES
        ;   INPUT
        ;   event:  ListEvent
        ; IMPLEMENTATION
        ;  open save dialog window
        ; HISTORY
        ; __date__ :        PTS:            Description
        ; 13-01-2011
        ******************************************************************************/
        private function fileSelectEvent(event:ListEvent):void {
            this.isSelected = true ;
            this.fileName = String(historyFilesGrid.selectedItem) ;
        } /** END FUNCTION 'fileSelectEvent' **/
	]]>
		
	</mx:Script>
    <mx:DataGrid id="historyFilesGrid" dataProvider="{files}" editable="false"
        dragEnabled="false" itemClick="fileSelectEvent(event);" width="100%" height="100%"
        itemRollOver="onItemRollOver(event)"
        itemRollOut="onItemRollOut(event)">
        <mx:columns>
            <mx:DataGridColumn dataField="History File Name" headerText="{ResourceUtil.getInstance().getString('bbb.chat.viewersGrid.FileName')}" dataTipField="History File Name" editable="false" width="35"
                sortable="true" id="fileField"/>
        </mx:columns>
    </mx:DataGrid>
    <mx:ControlBar width="100%"> 
   		 <mx:Button id="downloadBtn" label="{ResourceUtil.getInstance().getString('bbb.chat.downloadBtn.label')}" enabled="{isSelected}"
    	   			toolTip="{ResourceUtil.getInstance().getString('bbb.chat.downloadfile.toolTip')}" />
     	 <mx:Spacer width="100%"/>
    	 <mx:Button id="cancelBtn" label="{ResourceUtil.getInstance().getString('bbb.chat.cancelBtn.label')}" 
    	   			toolTip="{ResourceUtil.getInstance().getString('bbb.chat.cancelBtn.toolTip')}" 
    	   			click="closeHistoryWindow()"/>  			
    </mx:ControlBar>  
</mx:TitleWindow> 