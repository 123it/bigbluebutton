<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="init()" xmlns:mate="http://mate.asfusion.com/">
	
	<mate:Listener type="{cCHAT_ButtonEvent.NEW_BUTTON}" method="handleNewButton" />
    <mate:Listener type="{cCHAT_ButtonEvent.SWITCH_BUTTON}" method="handleSwitchButton" />
    <mate:Listener type="{cCHAT_ButtonEvent.CLOSE_BUTTON}" method="handleCloseButton" />
	
	<mx:Script>
		<![CDATA[
        
            import com.asfusion.mate.events.Dispatcher;
            
            import org.bigbluebutton.util.i18n.ResourceUtil;
            
            import org.bigbluebutton.modules.chat.events.cCHAT_RecordMessageEvent;
            import org.bigbluebutton.modules.chat.events.cCHAT_ButtonEvent;
            import org.bigbluebutton.modules.chat.events.cCHAT_RecordPrivateMessageEvent;
            import org.bigbluebutton.modules.chat.events.cCHAT_HistoryCommandEvent;
            import org.bigbluebutton.modules.chat.events.cCHAT_HistoryWindowEvent;
            import org.bigbluebutton.modules.chat.events.cCHAT_HistoryFileListEvent ;
            
            import org.bigbluebutton.main.api.UserManager;
            import org.bigbluebutton.main.model.users.Conference;
            import org.bigbluebutton.common.Role;
            import org.bigbluebutton.common.Images;
            import mx.managers.PopUpManager;
            import mx.collections.ArrayCollection;
            import flash.utils.Timer ;
            import flash.events.TimerEvent ;
            import mx.controls.Alert ;
            
            private var conference:Conference = UserManager.getInstance().getConference();
            private var historyWindow:ChatHistoryFileWindow;
            private var isRecord:Boolean = false ;
            private var images:Images = new Images();
            private var blinkRecord:Timer = new Timer(500); ;
            private var isBlink:Boolean = false ;
            private var objRecord:Object ;
            private static const PUBLIC_CHAT_USERID:String = '0';
            
            public var chatView:ChatView;
            public var recordUserList:ArrayCollection = new ArrayCollection();
            
            [Bindable]
			public var participants:ArrayCollection = new ArrayCollection();
            
            
            [Bindable] public var startRecordChat:Class = images.startRecordChat;
            [Bindable] public var stopRecordChat:Class = images.stopRecordChat;
            [Bindable] private var isModerator:Boolean=false ;
            [Bindable] private var isButtonVisible:Boolean=false ;
            [Bindable] private var isPrivateRecord:Boolean=false ;
            [Bindable] private var sender:String = String(conference.me.userid);
            [Bindable] private var receiver:String = PUBLIC_CHAT_USERID;
            [Bindable] private var receiverName:String;
            
            /*****************************************************************************
            ;  init
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ;   this routine is the initialization when file load
            ; RETURNS : N/A
            ;
            ; INTERFACE NOTES
            ;   INPUT
            ; 
            ; IMPLEMENTATION
            ;   add listener to timer
            ;   set button visible
            ;   set private or public chat
            ;
            ; HISTORY
            ; __date__ :        PTS:            Description
            ; 16-01-2011
            ******************************************************************************/
            private function init():void{
                blinkRecord.addEventListener(TimerEvent.TIMER , doBlinkButton);
                checkModerator();
                setButtonVisible(PUBLIC_CHAT_USERID) ;
                setPrivateRecordChat(PUBLIC_CHAT_USERID);
            }/** END FUNCTION 'init' **/
            
            /*****************************************************************************
            ;  setButtonVisible
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ;   this routine is used to set the visible to button
            ; RETURNS : N/A
            ;
            ; INTERFACE NOTES
            ;   INPUT
            ;   userid  :   id of user
            ;
            ; IMPLEMENTATION
            ;   set visible record and download button to true or false
            ;
            ; HISTORY
            ; __date__ :        PTS:            Description
            ; 16-01-2011
            ******************************************************************************/
            private function setButtonVisible(userid:String):void{
                if ( null == userid ){
                    return ;
                }
                
                if ( (true == isModerator) || (PUBLIC_CHAT_USERID != userid) ){
                    this.isButtonVisible = true ;
                }else{
                    this.isButtonVisible = false ;
                }
            }/** END FUNCTION 'setButtonVisible' **/
            
            /*****************************************************************************
            ;  setPrivateRecordChat
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ;   this routine is used to set the private or public chat
            ; RETURNS : N/A
            ;
            ; INTERFACE NOTES
            ;   INPUT
            ;   userid  :   id of user
            ;
            ; IMPLEMENTATION
            ;   set user is record private or public chat  
            ; HISTORY
            ; __date__ :        PTS:            Description
            ; 16-01-2011
            ******************************************************************************/
            private function setPrivateRecordChat(userid:String):void{
                if ( null == userid ){
                    return ;
                }
                
                if ( (PUBLIC_CHAT_USERID != userid) ){
                    
                    this.isPrivateRecord = true ;
                }else{
                    
                    this.isPrivateRecord = false ;
                }
            }/** END FUNCTION 'setPrivateRecordChat' **/
            
            /*****************************************************************************
            ;  checkModerator
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ; this routine is used to check whether current user is moderator
            ; RETURNS : N/A
            ;
            ; INTERFACE NOTES
            ;   INPUT
            ; 
            ; IMPLEMENTATION
            ;  set status whether the current user is moderator
            ;
            ; HISTORY
            ; __date__ :        PTS:            Description
            ; 16-01-2011
            ******************************************************************************/
            private function checkModerator():void{
                if ( conference.me.role == Role.MODERATOR ){
                    this.isModerator = true ;
                }else{
                    this.isModerator = false ;
                }
            }/** END FUNCTION 'checkModerator' **/
            
            /*****************************************************************************
            ;  handleNewButton
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ; this routine is used to handle when new button are added
            ; RETURNS : N/A
            ;
            ; INTERFACE NOTES
            ;   INPUT
            ;   e   :   cCHAT_ButtonEvent
            ; IMPLEMENTATION
            ;  add user to list when new button was add to the user
            ;
            ; HISTORY
            ; __date__ :        PTS:            Description
            ; 16-01-2011
            ******************************************************************************/
            private function handleNewButton(e:cCHAT_ButtonEvent):void{
            
                if ( null == e ){
                    return ;
                }
                
                if ( false == isUserExists(e.receiver) ){
                    objRecord = new Object() ;
                    objRecord.sender = this.sender ;
                    objRecord.receiver = e.receiver ;
                    objRecord.name = getUserName(e.receiver);
                    objRecord.isRecord = false ;
                    recordUserList.addItem(objRecord) ;
                }else{
                    objRecord = getUser(e.receiver) ;
                }
                this.receiver = objRecord.receiver ;
                this.receiverName = objRecord.name ;
                setButtonVisible(e.receiver) ;
                setPrivateRecordChat(e.receiver);
            }/** END FUNCTION 'handleNewButton' **/
            
            /*****************************************************************************
            ;  getRecordStatus
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ; this routine is used to get the record status
            ; RETURNS : N/A
            ;
            ; INTERFACE NOTES
            ;   INPUT
            ;   userid : id of user
            ;
            ; IMPLEMENTATION
            ;  get recording status from user in the list
            ;
            ; HISTORY
            ; __date__ :        PTS:            Description
            ; 16-01-2011
            ******************************************************************************/
            private function getRecordStatus(userid:String):Boolean {
                if ( null == userid ){
                    return false ;
                }
                
                var record:Boolean = false ;
                for( var i:int = 0 ; i<recordUserList.length; i++ ){
                    if ( recordUserList.getItemAt(i).receiver == userid ){
                        record = recordUserList.getItemAt(i).isRecord ;
                        break ;
                    }
                }
                return record ;
            }/** END FUNCTION 'getRecordStatus' **/
            
            /*****************************************************************************
            ;  getUser
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ; this routine is used to get user object
            ; RETURNS : N/A
            ;
            ; INTERFACE NOTES
            ;   INPUT
            ;   userid id of user
            ; IMPLEMENTATION
            ;  get user from user list
            ; HISTORY
            ; __date__ :        PTS:            Description
            ; 16-01-2011
            ******************************************************************************/
            private function getUser(userid:String):Object {
                
                var user:Object = null ;
                for(var i:int=0; i<recordUserList.length; i++ ){
                    if ( recordUserList.getItemAt(i).receiver == userid ){
                        user = recordUserList.getItemAt(i) ;
                        break ;
                    }
                }
                return user;
            }/** END FUNCTION 'getUser' **/
            
            /*****************************************************************************
            ;  isUserExists
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ; this routine is used to check whether the button are added
            ; RETURNS : N/A
            ;
            ; INTERFACE NOTES
            ;   INPUT
            ;   userid id of user
            ; IMPLEMENTATION
            ;  check whether user is already in the list
            ; HISTORY
            ; __date__ :        PTS:            Description
            ; 16-01-2011
            ******************************************************************************/
            private function isUserExists(userid:String):Boolean {
                if ( null == userid ){
                    return false;
                }
                var isExist:Boolean = false ;
                for( var i:int = 0 ; i<recordUserList.length; i++ ){
                    if ( recordUserList.getItemAt(i).receiver == userid ){
                        isExist = true ;
                        break ;
                    }
                }
                return isExist ;
            }/** END FUNCTION 'isUserExists' **/
            
            /*****************************************************************************
            ;  getUserName
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ; this routine is used to get user name from object
            ; RETURNS : N/A
            ;
            ; INTERFACE NOTES
            ;   INPUT
            ;  userid : id of user
            ; IMPLEMENTATION
            ;  get user name by user id
            ; HISTORY
            ; __date__ :        PTS:            Description
            ; 16-01-2011
            ******************************************************************************/
            private function getUserName(userid:String):String{
                
                if ( null == userid ){
                    return null;
                }
                
                var uname:String = "unknown user";
                for(var i:int=0; i<participants.length; i++ ){
                    if ( participants.getItemAt(i).userid == userid ){
                        uname = participants.getItemAt(i).label;
                        break ;
                    }
                }
                
                return uname ;
            }/** END FUNCTION 'getUserName' **/
                       
            /*****************************************************************************
            ;  handleSwitchButton
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ; this routine is used to handle when user change tab
            ; RETURNS : N/A
            ;
            ; INTERFACE NOTES
            ;   INPUT
            ;  e : cCHAT_ButtonEvent
            ; IMPLEMENTATION
            ;  handle when user tab was changed
            ; HISTORY
            ; __date__ :        PTS:            Description
            ; 16-01-2011
            ******************************************************************************/
            private function handleSwitchButton(e:cCHAT_ButtonEvent):void{
            
                if ( null == e ){
                    return ;
                }

                this.receiver = e.receiver ;
                this.receiverName = e.name ;
                
                changeButtonStyle(getRecordStatus(e.receiver)) ;
                
                setButtonVisible(this.receiver) ;
                setPrivateRecordChat(this.receiver);
                
            }/** END FUNCTION 'handleSwitchButton' **/
            
            /*****************************************************************************
            ;  handleCloseButton
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ; this routine is used to handle when user close button
            ; RETURNS : N/A
            ;
            ; INTERFACE NOTES
            ;   INPUT
            ;  e : cCHAT_ButtonEvent
            ; IMPLEMENTATION
            ;  handle when user tab was closed
            ; HISTORY
            ; __date__ :        PTS:            Description
            ; 16-01-2011
            ******************************************************************************/
            private function handleCloseButton(e:cCHAT_ButtonEvent):void{
                if ( null == e ){
                    return ;
                }
                setButtonVisible(this.receiver) ;
                setPrivateRecordChat(this.receiver);
            }/** END FUNCTION 'handleCloseButton' **/
            
             /*****************************************************************************
            ;  setRecordStatus
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ; this routine is used to handle when user close button
            ; RETURNS : N/A
            ;
            ; INTERFACE NOTES
            ;   INPUT
            ;   userid : id of user
            ;   isRecord : record status
            ; IMPLEMENTATION
            ;  set record status to user list
            ; HISTORY
            ; __date__ :        PTS:            Description
            ; 16-01-2011
            ******************************************************************************/
            private function setRecordStatus(userid:String, isRecord:Boolean):void{
                if ( null == userid ){
                    return ;
                }
                for( var i:int = 0 ; i<recordUserList.length; i++ ){
                    if ( recordUserList.getItemAt(i).receiver == userid ){
                        recordUserList.getItemAt(i).isRecord = isRecord ;
                        break ;
                    }
                }
            }/** END FUNCTION 'setRecordStatus' **/
            
            /*****************************************************************************
            ;  recordChat
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ;   this routine is used to handle when user click on record button
            ; RETURNS : N/A
            ;
            ; INTERFACE NOTES
            ;   INPUT
            ;   sender  :       sender user id
            ;   receiver    :   receiver user id
            ; IMPLEMENTATION
            ;   set status to a user in the list
            ;   blink button
            ;
            ; HISTORY
            ; __date__ :        PTS:            Description
            ; 16-01-2011
            ******************************************************************************/            
            private function recordChat(sender:String,receiver:String):void{

                if ( null == sender || null == receiver ){
                    return ;
                }
                
                this.isRecord = ! this.isRecord ;
                
                setRecordStatus( receiver, this.isRecord ) ;
                
                changeButtonStyle(getRecordStatus(receiver)) ;
                
                if ( true == isPrivateRecord ){
                    var priEvent:cCHAT_RecordPrivateMessageEvent = new cCHAT_RecordPrivateMessageEvent(cCHAT_RecordPrivateMessageEvent.RECORD_PRIVATE_CHAT_MESSAGE_EVENT) ;
                    priEvent.sender = this.sender ;
                    priEvent.receiver = receiver ;
                    priEvent.receiverName = this.receiverName ;
                    priEvent.isRecording = getRecordStatus(receiver) ;
                    this.dispatchEvent(priEvent) ;
                }else{
                    var recEvent:cCHAT_RecordMessageEvent = new cCHAT_RecordMessageEvent(cCHAT_RecordMessageEvent.RECORD_CHAT_MESSAGE_EVENT);  
                    recEvent.isRecording = getRecordStatus(receiver) ;
                    this.dispatchEvent(recEvent);
                }
    
            }/** END FUNCTION 'recordChat' **/ 
            
            /*****************************************************************************
            ;  changeButtonStyle
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ;   this routine is used to handle button style
            ; RETURNS : N/A
            ;
            ; INTERFACE NOTES
            ;   INPUT
            ;   status    :   record status
            ; IMPLEMENTATION
            ;  change button icon
            ; HISTORY
            ; __date__ :        PTS:            Description
            ; 16-01-2011
            ******************************************************************************/            
            private function changeButtonStyle(status:Boolean):void{
                if ( true == status ){
                    this.recordBtn.setStyle('icon',stopRecordChat);
                    this.recordBtn.toolTip = ResourceUtil.getInstance().getString('bbb.chat.stopRecordChat.toolTip');  
                    blinkRecord.start();
                    
                }else{
                    this.recordBtn.setStyle('icon',startRecordChat);
                    this.recordBtn.toolTip = ResourceUtil.getInstance().getString('bbb.chat.startRecordChat.toolTip');

                    blinkRecord.stop();
                }
            }/** END FUNCTION 'changeButtonStyle' **/
            
            /*****************************************************************************
            ;  blinkButton
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ;   this routine is used to blink the record button
            ; RETURNS : N/A
            ;
            ; INTERFACE NOTES
            ;   INPUT
            ;   e   :   TimeEvent
            ; IMPLEMENTATION
            ;  blink button
            ; HISTORY
            ; __date__ :        PTS:            Description
            ; 16-01-2011
            ******************************************************************************/
            private function doBlinkButton(e:TimerEvent):void{
                isBlink = ! isBlink ;
                if ( false == isBlink ){
                    this.recordBtn.setStyle('icon',stopRecordChat);
                }else{
                    this.recordBtn.setStyle('icon',startRecordChat);
                }
            }/** END FUNCTION 'blinkButton' **/
        
            /*****************************************************************************
            ;  handleOpenHistoryFile
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ;   this routine is used to handle when user open history window
            ; RETURNS : N/A
            ;
            ; INTERFACE NOTES
            ;   INPUT
            ; 
            ; IMPLEMENTATION
            ;  open history window
            ; HISTORY
            ; __date__ :        PTS:            Description
            ; 16-01-2011
            ******************************************************************************/
            private function handleOpenHistoryWindow():void{

                if ( null != historyWindow ){
                    PopUpManager.removePopUp(historyWindow);
                    historyWindow = null ;
                }
                
                historyWindow = PopUpManager.createPopUp(chatView, ChatHistoryFileWindow , false) as ChatHistoryFileWindow;
                historyWindow.isPrivate = isPrivateRecord ;
                PopUpManager.centerPopUp(historyWindow);
                var e:cCHAT_HistoryFileListEvent ;
                
                if ( PUBLIC_CHAT_USERID == this.receiver ){
                    e = new cCHAT_HistoryFileListEvent(cCHAT_HistoryFileListEvent.LOAD_FILE_LIST) ;                    
                }else{
                    e = new cCHAT_HistoryFileListEvent(cCHAT_HistoryFileListEvent.LOAD_PRIVATE_FILE_LIST) ;
                    e.sender = String(conference.me.userid) ;
                }
                this.dispatchEvent(e) ;
    
            }/** END FUNCTION 'handleOpenHistoryWindow' **/
            
		]]>
	</mx:Script>
	<mx:Button icon="{startRecordChat}" id="recordBtn" visible="{isButtonVisible}" name="{sender}"
               toolTip="{ResourceUtil.getInstance().getString('bbb.chat.startRecordChat.toolTip')}" 
               click="recordChat(sender,receiver)"/>
    <mx:Button label="Open" id="openBtn" visible="{isButtonVisible}" name="{sender}"
               toolTip="{ResourceUtil.getInstance().getString('bbb.chat.downloadfile.toolTip')}" 
               click="handleOpenHistoryWindow()"/>
</mx:HBox>
