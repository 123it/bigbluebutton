<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:mate="http://mate.asfusion.com/"
	xmlns:local="*"
    width="100%" height="100%" 
    paddingBottom="5" 
    creationComplete="onCreationComplete()" verticalScrollPolicy="off" horizontalScrollPolicy="off"      
    rollOut="hideCursor()"
    xmlns:views="org.bigbluebutton.modules.present.views.*"
    implements="org.bigbluebutton.common.IBbbCanvas">
    
    <mate:Listener type="{ZoomEvent.ZOOM}" method="handleZoomEvent" />
    <mate:Listener type="{MoveEvent.MOVE}" method="handleMoveEvent" />
    <mate:Listener type="{SlideEvent.SLIDE_LOADED}" method="handleSlideLoadedEvent" />
    <mate:Listener type="{MadePresenterEvent.SWITCH_TO_PRESENTER_MODE}" method="handleSwitchToPresenterEvent" />
    <mate:Listener type="{MadePresenterEvent.SWITCH_TO_VIEWER_MODE}" method="handleSwitchToViewerEvent" />
    <mate:Listener type="{CursorEvent.UPDATE_CURSOR}" method="handleUpdateCursorEvent" />
    <mate:Listener type="{WindowResizedEvent.PRESENTATION_WINDOW_RESIZED_EVENT}" method="handleWindowResizeEvent"/>
    <mate:Listener type="{PresenterCommands.RESIZE}" method="handleSlideResizeEvent"/>
    
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import flash.events.Event;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Button;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			
			import org.bigbluebutton.common.IBbbCanvas;
			import org.bigbluebutton.main.events.MadePresenterEvent;
			import org.bigbluebutton.modules.present.events.CursorEvent;
			import org.bigbluebutton.modules.present.events.DisplaySlideEvent;
			import org.bigbluebutton.modules.present.events.MoveEvent;
			import org.bigbluebutton.modules.present.events.PresenterCommands;
			import org.bigbluebutton.modules.present.events.SlideEvent;
			import org.bigbluebutton.modules.present.events.SlideResizedEvent;
			import org.bigbluebutton.modules.present.events.UploadEvent;
			import org.bigbluebutton.modules.present.events.WindowResizedEvent;
			import org.bigbluebutton.modules.present.events.ZoomEvent;

			public var zoomPercentage:int = 100;
			public static const ZOOM_STEP:int = 5;
			public static const THUMBNAILS_CLOSED:String = "ThumbnailsClosed";
			
			/**
			 * Variables that holds the presenter's locations of the
			 * loader so we can move the participant's slides in the
			 * same scale to maintain sync on the presenter's cursor.
			 */ 
			private var presentersLoaderXOffsetFromCanvas:Number = 0;
			private var presentersLoaderYOffsetFromCanvas:Number = 0;
			
			/**
			 * Variables that stores the presenter's ratio between
			 * loader and canvas. We need to size the slide with the
			 * same scale as the presenter so that the cursor syncs
			 * properly.
			 */
			private var presentersLoaderCanvasWidthRatio:Number = 1;
			private var presentersLoaderCanvasHeightRatio:Number = 1;
			
			private var canvasMouseXOnMouseDown:int;
			private	var canvasMouseYOnMouseDown:int;
			private var loaderXOnMouseDown:int;
			private var loaderYOnMouseDown:int;
						
			private var cursor:Shape;
			private var overlayChildrenHolder:Canvas = new Canvas();
			private var overlayCanvas:IBbbCanvas;
			
			//The following few variables concern text selection
			private var slideClip:MovieClip;
			private var slideText:TextSnapshot;
			private var firstChar:Number = -1;
			private var lastChar:Number = -1;
				
        	[Bindable] public var slides:ArrayCollection;
			[Bindable] public var selectedSlide:int=0;
			[Bindable] private var isPresenter:Boolean = false;
			
			private var dispatcher:Dispatcher = new Dispatcher();
			
			// the follwing variable used to fix 
			// 'enable full screen presentation window'
			private var gDefaultWidth:Number     = 1;
			private var gDefaultHeight:Number    = 1;
			private var gisLoading:Boolean        = false;
			private var gisLoadedComplete:Boolean = false;
			private var gCurrentSlideWidth:int    = 1;
			private var gCurrentSlideHeight:int    = 1;
			[Bindable] private var CONTROL_BAR_HEIGHT:int    = 45;
            private static const TOP_WINDOW_BORDER:int      = 30;
            private static const WIDTH_PADDING:int  = 5;
            
            // the status of viewer that follow the presenter slide.
            private var gisLocked:Boolean = false;
            
            private var gSlide:ByteArray = null;
            
            /*****************************************************************************
            ;  switchFollowPreseterSlide
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ;   This routine is use to switch to follow presenter slide or not.
            ;
            ; RETURNS
            ;
            ; INTERFACE NOTES
            ;
            ; IMPLEMENTATION
            ;      - set the following presenter slide status
            ;      - check the status to enable or disable viewer
            ;        to move or zoom slide.
            ;
            ; HISTORY
            ; __date__ :        PTS:            Description
            ; 2011.01.04                        lock and unlock presentation slide
            ;                                   from presenter
            ;
            ******************************************************************************/
            public function switchFollowPreseterSlide() : void {
                gisLocked   = !gisLocked;
                
                // viewer unlocked from presenter
                if ( false == gisLocked ){
                    // add event listener to allow view to drag move and zoom slide
                    addEventListener(MouseEvent.MOUSE_WHEEL, onMouseWheelZoomEvent);
                    slideLoader.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
                    slideLoader.addEventListener(MouseEvent.MOUSE_UP, onMouseUp);
                    slideLoader.addEventListener(MouseEvent.MOUSE_OUT, onMouseOut);
                    addEventListener(MouseEvent.MOUSE_MOVE, mouseCursorUpdateListener)
                }else{
                    // remove event listener to disable view action on presentation slide
                    removeEventListener(MouseEvent.MOUSE_WHEEL, onMouseWheelZoomEvent);
                    slideLoader.removeEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
                    slideLoader.removeEventListener(MouseEvent.MOUSE_UP, onMouseUp);
                    slideLoader.removeEventListener(MouseEvent.MOUSE_OUT, onMouseOut);
                    removeEventListener(MouseEvent.MOUSE_MOVE, mouseCursorUpdateListener);
                    
                    // check current presenter slide
                    // it will not null when presenter change slide
                    // during view unlocked slide from presenter.
                    if ( null != gSlide ){
                        //set current presenter slide to viewer.
                        slideLoader.source = gSlide;
                        gSlide = null;
                    }
                }
            }
            /**
             * END FUNCTION 'switchFollowPreseterSlide'
             **/
            
            /*****************************************************************************
            ;  getFollowPresenterStatus
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ;   This routine is use to get the following presenter slide status.
            ;
            ; RETURNS
            ;       gisLocke: the status of following presenter slide.
            ;
            ; INTERFACE NOTES
            ;
            ; IMPLEMENTATION
            ;
            ; HISTORY
            ; __date__ :        PTS:            Description
            ; 2011.01.04                        lock and unlock presentation slide
            ;                                   from presenter
            ;
            ******************************************************************************/
            public function getFollowPresenterStatus() : Boolean{
                return gisLocked;
            }
            /**
             * END FUNCTION 'getFollowPresenterStatus'
             **/

            /*****************************************************************************
            ;  setCurrentSlideWidth
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ;   This routine is use to set the real presentation slide width
            ;   to 'gCurrentSlideWidth' variable.
            ;
            ; RETURNS : N/A
            ;
            ; INTERFACE NOTES
            ;   INPUT
            ;       width: presentation slide width
            ;
            ; IMPLEMENTATION
            ;  
            ; HISTORY
            ; __date__ :        PTS:            Description
            ; 2010.12.28                        maximize presentation window
            ;
            ******************************************************************************/
            public function setCurrentSlideWidth(width:int) : void{
                gCurrentSlideWidth   = width;
            }
            /**
             * END FUNCTION 'setCurrentSlideWidth'
             **/
             
            /*****************************************************************************
            ;  setCurrentSlideHeight
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ;   This routine is use to set the real presentation slide height
            ;   to 'gCurrentSlideHeight' variable.
            ;
            ; RETURNS : N/A
            ;
            ; INTERFACE NOTES
            ;   INPUT
            ;       height: presentation slide height
            ;
            ; IMPLEMENTATION
            ;  
            ; HISTORY
            ; __date__ :        PTS:            Description
            ; 2010.12.28                        maximize presentation window
            ;
            ******************************************************************************/
            public function setCurrentSlideHeight(height:int) : void{
                gCurrentSlideHeight  = height;
            }
            /**
             * END FUNCTION 'setCurrentSlideHeight'
             **/
            /*****************************************************************************
            ;  setIsLoading
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ;   This routine is use to set value to 'gisLoading' after presentation
            ;   slide finish loading.
            ;
            ; RETURNS : N/A
            ;
            ; INTERFACE NOTES
            ;   INPUT
            ;       val: 'true' loading, 'false' loading complete
            ;
            ; IMPLEMENTATION
            ;  
            ; HISTORY
            ; __date__ :        PTS:            Description
            ; 2010.12.28                        maximize presentation window
            ;
            ******************************************************************************/
            public function setIsLoading(val:Boolean) : void{
                gisLoading = val;
            }
            /**
             * END FUNCTION 'setIsLoading'
             **/
            
            /*****************************************************************************
            ;  setIsLoadedComplete
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ;   This routine is use to set value to 'gisLoadedComplete' after presentation
            ;   slide finish loading.
            ;
            ; RETURNS : N/A
            ;
            ; INTERFACE NOTES
            ;   INPUT
            ;       val: 'false' loading, 'true' loading complete
            ;
            ; IMPLEMENTATION
            ;  
            ; HISTORY
            ; __date__ :        PTS:            Description
            ; 2010.12.28                        maximize presentation window
            ;
            ******************************************************************************/
            public function setIsLoadedComplete(val:Boolean) : void{
                gisLoadedComplete = val;
            }
            /**
             * END FUNCTION 'setIsLoadedComplete'
             **/
             
            /*****************************************************************************
            ;  getIsLoadedComplete
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ;   This routine is use to get presentation loading status 
            ;   after presentation slide finish loading.
            ;
            ; RETURNS
            ;   gisLoadedComplete: the presentation loading status
            ;
            ; INTERFACE NOTES
            ;
            ; IMPLEMENTATION
            ;  
            ; HISTORY
            ; __date__ :        PTS:            Description
            ; 2010.12.28                        maximize presentation window
            ;
            ******************************************************************************/
            public function getIsLoadedComplete() : Boolean{
                return gisLoadedComplete;
            } 
            /**
             * END FUNCTION 'getIsLoadedComplete'
             **/
             
            /*****************************************************************************
            ;  setDefaultWidth
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ;   This routine is use to set the default presentation window width
            ;   to 'gDefaultWidth'
            ;
            ; RETURNS : N/A
            ;
            ; INTERFACE NOTES
            ;   INPUT
            ;       lWidth: width of presentation window
            ;
            ; IMPLEMENTATION
            ;  
            ; HISTORY
            ; __date__ :        PTS:            Description
            ; 2010.12.28                        maximize presentation window
            ;
            ******************************************************************************/
            public function setDefaultWidth(lWidth:Number) : void{
                gDefaultWidth = lWidth;
                // determine the gDefaultWidth is holding the default width
                if (2< gDefaultWidth){
                    gDefaultWidth = gDefaultWidth - WIDTH_PADDING;
                }
            }
            /**
             * END FUNCTION 'setDefaultWidth'
             **/
             
            /*****************************************************************************
            ;  setDefaultHeight
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ;   This routine is use to set the default presentation window height
            ;   to 'gDefaultHeight'
            ;
            ; RETURNS : N/A
            ;
            ; INTERFACE NOTES
            ;   INPUT
            ;       lHeight: height of presentation window
            ;
            ; IMPLEMENTATION
            ;  
            ; HISTORY
            ; __date__ :        PTS:            Description
            ; 2010.12.28                        maximize presentation window
            ;
            ******************************************************************************/
            public function setDefaultHeight(lHeight:Number) : void{
                gDefaultHeight  = lHeight;
                // determine the gDefaultWidth is holding the default height
                if (2 < gDefaultHeight){
                    gDefaultHeight = gDefaultHeight - CONTROL_BAR_HEIGHT - TOP_WINDOW_BORDER
                }
            }
            /**
             * END FUNCTION 'setDefaultHeight'
             **/
            
            /*****************************************************************************
            ;  getDefaultWidth
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ;   This routine is use to get the default presentation window width
            ;
            ; RETURNS
            ;   gDefaultWidth: the default width of presentation window.
            ;
            ; INTERFACE NOTES
            ;
            ; IMPLEMENTATION
            ;  
            ; HISTORY
            ; __date__ :        PTS:            Description
            ; 2010.12.28                        maximize presentation window
            ;
            ******************************************************************************/
            public function getDefaultWidth() : Number{
                return gDefaultWidth;
            }
            /**
             * END FUNCTION 'getDefaultWidth'
             **/
             
            /*****************************************************************************
            ;  getDefaultHeight
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ;   This routine is use to get the default presentation window height
            ;
            ; RETURNS
            ;   gDefaultHeight: the default height of presentation window.
            ;
            ; INTERFACE NOTES
            ;
            ; IMPLEMENTATION
            ;  
            ; HISTORY
            ; __date__ :        PTS:            Description
            ; 2010.12.28                        maximize presentation window
            ;
            ******************************************************************************/
            public function getDefaultHeight() : Number{
                return gDefaultHeight;
            }
            /**
             * END FUNCTION 'getDefaultHeight'
             **/
				
			private function onCreationComplete():void {
				slideLoader.width = this.width;
				slideLoader.height = this.height;
				
				cursor = new Shape();
				cursor.graphics.lineStyle(6, 0xFF0000, 0.6);
				cursor.graphics.drawCircle(0,0,3);
				this.rawChildren.addChild(cursor);
				cursor.visible = false;
				
				overlayChildrenHolder = new Canvas();
				this.addChild(overlayChildrenHolder);
				overlayChildrenHolder.x = 0;
				overlayChildrenHolder.y = 0;

				this.setChildIndex(thumbnailView, this.numChildren - 1);
                
                // set to true to lock viewer slide and presenter slide.
				gisLocked   = true;
			}
						
			public function setSlides(slides:ArrayCollection):void {
				this.slides = slides;
				thumbnailView.dataProvider = this.slides.toArray();
			}
			
			private function changeSlide():void {
				dispatchEvent(new PresenterCommands(PresenterCommands.GOTO_SLIDE, thumbnailView.selectedIndex));
				thumbnailView.visible = false;
				showOverlayCanvas(true);
				dispatchEvent(new Event(THUMBNAILS_CLOSED));
			}
			
			private function changeIndex(e:ListEvent):void {
				dispatchEvent(e);
			}
			
			/**
			 * Triggered when the presenter clicks on the slides with the intent of moving it.
			 */		
			private function onMouseDown(e:MouseEvent):void {						
				canvasMouseXOnMouseDown = this.mouseX;
				canvasMouseYOnMouseDown = this.mouseY;
				loaderXOnMouseDown = slideLoader.x;
				loaderYOnMouseDown = slideLoader.y;
							
				addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
			}
			
			/**
			 * Triggered when the mouse had been clicked and dragged to move the slide.
			 */ 
			private function onMouseMove(e:MouseEvent):void {	
				// Compute the change in mouse position from where the mouse was clicked.
				var deltaCanvasMouseX:Number = this.mouseX - canvasMouseXOnMouseDown;
				var deltaCanvasMouseY:Number = this.mouseY - canvasMouseYOnMouseDown;

				// Now we move the slide by the amount of mouse location change.
				slideLoader.x = loaderXOnMouseDown + deltaCanvasMouseX;
				slideLoader.y = loaderYOnMouseDown + deltaCanvasMouseY;
				
				// Move the slide within the loader.
				fitSlideToLoader();
                
                // check the participant status or 'lock following' presenter
                // status to allow viewer slide to follow presenter slide.
				if( true ==  isPresenter || true == gisLocked){
				    notifyOtherParticipantsOfSlideMoving();
				}
			}
			
			/**
			 * Send a message to other participants indicating the presenter has moved the slide.
			 */
			private function notifyOtherParticipantsOfSlideMoving():void {
				var presentEvent:PresenterCommands = new PresenterCommands(PresenterCommands.MOVE);
				presentEvent.xOffset = slideLoader.x/slideLoader.width;
				presentEvent.yOffset = slideLoader.y/slideLoader.height;
				presentEvent.slideToCanvasWidthRatio = slideLoader.width/this.width;
				presentEvent.slideToCanvasHeightRatio = slideLoader.height/this.height;
				dispatchEvent(presentEvent);
			}
			
			/**
			 * Triggered when the presenter releases the mouse button.
			 */		
			private function onMouseUp(e:MouseEvent):void{		
				removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
			}
			
			/**
			 * Triggered when the presenter has dragged the cursor outside the presetation window.
			 */
			private function onMouseOut(e:MouseEvent):void{
				removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
			}
			
			/**
			 * Handles the resizing of the presenter's window. This is for the presenter resizing
			 * his/her window.
			 */
			private function handleWindowResizeEvent(event:WindowResizedEvent):void {						
				this.width = event.width;
				this.height = event.height;
				resizeAndMoveLoaderInRelationToCanvas();		
			}
			
			/**
			 * Resize and moves the slide loader within the canvas container.
			 */			
			private function resizeAndMoveLoaderInRelationToCanvas():void {
			    // fix: maximize presentation window
			    // compute the slide height and width
                slideLoader.height = gDefaultHeight * presentersLoaderCanvasHeightRatio;
                slideLoader.width = ((gCurrentSlideWidth * slideLoader.height)/gCurrentSlideHeight);
                
                slideLoader.x = slideLoader.width * presentersLoaderXOffsetFromCanvas;
                slideLoader.y = slideLoader.height * presentersLoaderYOffsetFromCanvas;
				
				fitSlideToLoader();

			}
			
			/**
			 * Fit the slide inside the loader.
			 */			
			private function fitSlideToLoader():void {
				if (noSlideContentLoaded()) return;
				
				//slideLoader.content.x = slideLoader.x; // fix: maximize presentation window
				slideLoader.content.y = slideLoader.y;
				slideLoader.content.width = slideLoader.width;
				slideLoader.content.height = slideLoader.height;	
				
				zoomCanvas(slideLoader.width, slideLoader.height);
			}
									
			private function fitLoaderToCanvas():void{
				if (noSlideContentLoaded()) return;
				
				slideLoader.width = this.width;
				slideLoader.height = this.height;
				slideLoader.x = this.x;
				slideLoader.y = this.y;
				
				fitSlideToLoader();						
			}

			/**
			 * 
			 */
			private function resizeAndMoveLoaderBy(percent:Number):void {
				// Save the old loader dimensions. We need these to calculate
				// the new position of the loader;
				var oldLoaderHeight:int = slideLoader.height;
				var oldLoaderWidth:int = slideLoader.width;
                
                // fix: maximize presentation window
                // set width and height of slideLoader
				slideLoader.height  = gDefaultHeight * percent/100;
				slideLoader.width   = ((gCurrentSlideWidth * slideLoader.height)/gCurrentSlideHeight);

				slideLoader.x = calculateNewLoaderX(oldLoaderWidth);
				slideLoader.y = calculateNewLoaderY(oldLoaderHeight);
				
				fitSlideToLoader();
			}
			
			/**
			 * Determines the new y coordinate of the loader. This determines if the location has
			 * changed because the slide was resized or moved.
			 */
			private function calculateNewLoaderY(oldLoaderHeight:int):int {				
				var deltaPercentHeight:Number = (slideLoader.height - oldLoaderHeight) /oldLoaderHeight;
								
				var newLoaderY:int = (slideLoader.y/slideLoader.height) * deltaPercentHeight;				
				if (newLoaderY == 0) {
					newLoaderY = slideLoader.y - (deltaPercentHeight * 100);
				} else {
					newLoaderY = slideLoader.y - newLoaderY;
				}
				
				return newLoaderY;
			}
			
			/**
			 * Determines the new y coordinate of the loader. This determines if the location has
			 * changed because the slide was resized or moved.
			 */
			private function calculateNewLoaderX(oldLoaderWidth:int):int {				
				var deltaPercentWidth:Number = (slideLoader.width - oldLoaderWidth) / oldLoaderWidth;
				var newLoaderX:int = (slideLoader.x/slideLoader.width) * deltaPercentWidth;
				if (newLoaderX == 0) {
					newLoaderX = slideLoader.x - (deltaPercentWidth * 100);
				} else {
					newLoaderX = slideLoader.x - newLoaderX;
				}		
				
				return newLoaderX;		
			}
			
			private function handleSlideResizeEvent(event:PresenterCommands):void {
				zoomLoaderBy(event.newSizeInPercent);
			}
			
			public function zoomLoaderBy(percent:Number):void {				
				if (percent < 100) {
					zoomPercentage = 100;
				} else if (percent > 400) {
					zoomPercentage = 400;
				} else {
					zoomPercentage = percent;
				}
				
				// fix: maximize presentation window
                // call 'resizeAndMoveLoaderBy' function to 
                // show zoomed slide depending on 'zoomPercentage'
 				resizeAndMoveLoaderBy(zoomPercentage);
 				
				notifyOthersOfZoomEvent();
			}
			
			/**
			 * Triggered when the presenter uses the mouse wheel to zoom in/out of the slide.
			 */
			private function onMouseWheelZoomEvent(e:MouseEvent):void {
				if (presenterIsZoomingOut(e.delta)) {
					zoomPercentage -= ZOOM_STEP;
				} else {
					zoomPercentage += ZOOM_STEP;
				}
				
				zoomLoaderBy(zoomPercentage);	
				notifyListenersOfSlideResize(zoomPercentage);			
			}
			
			public function notifyListenersOfSlideResize(percent:Number):void {
				var event:SlideResizedEvent = new SlideResizedEvent();
				event.percent = percent;
				dispatcher.dispatchEvent(event);
			}
						
			private function notifyOthersOfZoomEvent():void {
				var presentEvent:PresenterCommands = new PresenterCommands(PresenterCommands.ZOOM);
				presentEvent.xOffset = slideLoader.x/slideLoader.width;
				presentEvent.yOffset = slideLoader.y/slideLoader.height;
				presentEvent.slideToCanvasWidthRatio = slideLoader.width/this.width;
				presentEvent.slideToCanvasHeightRatio = slideLoader.height/this.height;
				
				// check the participant status or 'lock following' presenter
                // status to allow viewer slide to follow presenter slide.
                if ( true == gisLocked || true == isPresenter ){
				    dispatchEvent(presentEvent);
				}
			}
			
			private function presenterIsZoomingOut(delta:Number):Boolean {
				// If delta is negative, the presenter is zooming-out of the presentation.
				return delta < 0;
			}
			
			/*****************************************************************************
            ;  handleMoveEvent
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ;   This routine is use to Handles notification from presenter 
            ;   that the slide has moved.
            ;
            ; RETURNS: N/A
            ;
            ; INTERFACE NOTES
            ;   INPUT
            ;       e: MoveEvent
            ;
            ; IMPLEMENTATION
            ;  
            ; HISTORY
            ; __date__ :        PTS:            Description
            ; 2010.12.28                        maximize presentation window
            ;
            ******************************************************************************/
			private function handleMoveEvent(e:MoveEvent) : void{
			    // fix: maximize presentation window
			    // check the slide status
			    // gisLoading 'true' and gisLoadedComplete 'false' mean slide is loading
			    if ( true == gisLoading && false == gisLoadedComplete){
			         gisLoadedComplete = true;
			         savePresentersSettings(e.xOffset, e.yOffset, e.slideToCanvasWidthRatio, e.slideToCanvasHeightRatio);                
                    if (false == isPresenter) {
                        resizeAndMoveLoaderInRelationToCanvas();
                    }
                    // set to 0 to display slide position at (0,0)
                    presentersLoaderXOffsetFromCanvas   = 0;
                    presentersLoaderYOffsetFromCanvas   = 0;
                    
                    moveCanvas(slideLoader.x, slideLoader.y);
                    return;
			    }  
			    if( true == gisLoading ){
			         gisLoading = false;
			         return;
			    }
			    // slide loaded
                if ( false == gisLoading ){
                    
                    // check the participant status or 'lock following' presenter
                    // status to allow viewer slide to follow presenter slide.
                    if (true == gisLocked || true == isPresenter){
                        savePresentersSettings(e.xOffset, e.yOffset, e.slideToCanvasWidthRatio, e.slideToCanvasHeightRatio);
                    }
                    if (false == isPresenter) {
                        //check the 'lock follow presenter slide' status
                        // to disable viewer slide follow presenter slide.
                        if ( true == gisLocked ){
                            resizeAndMoveLoaderInRelationToCanvas();
                        }
                    }
                    
                    moveCanvas(slideLoader.x, slideLoader.y);
                }
			}
            /**
             * END FUNCTION 'handleMoveEvent'
             **/
			
			/**
			 * Handle notification from presenter that the slide has been zoomed.
			 */						
			private function handleZoomEvent(e:ZoomEvent):void {
				savePresentersSettings(e.xOffset, e.yOffset, e.slideToCanvasWidthRatio, e.slideToCanvasHeightRatio);													
				if (!isPresenter) {
					resizeAndMoveLoaderInRelationToCanvas();
				}
				
				zoomCanvas(slideLoader.width, slideLoader.height);
			}
			
			/**
			 * Handle notification from loader that a slide has been loaded.
			 */						
			private function handleSlideLoadedEvent(e:SlideEvent):void{
			    //slideLoader.source = e.slide;
			    
			    // check the participant status or 'lock following' presenter
                // status to disable view change slide in unlocked status.
			    if ( true == isPresenter || true == gisLocked ){
			         slideLoader.source = e.slide;
			    }else{
			         gSlide = e.slide;
			    }
			}
			
			/**
			 * Handle the event where this presenter becomes a viewer because another attendee became presenter.
			 */			
			private function handleSwitchToViewerEvent(e:MadePresenterEvent):void{
				participantIsNowPresenter(false);
				removeEventListener(MouseEvent.MOUSE_WHEEL, onMouseWheelZoomEvent);
				slideLoader.removeEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
				slideLoader.removeEventListener(MouseEvent.MOUSE_UP, onMouseUp);
				slideLoader.removeEventListener(MouseEvent.MOUSE_OUT, onMouseOut);
				removeEventListener(MouseEvent.MOUSE_MOVE, mouseCursorUpdateListener);
			}
			
			/**
			 * Makes the attendee the presenter.
			 */
			private function handleSwitchToPresenterEvent(e:MadePresenterEvent):void{
				participantIsNowPresenter(true);
				addEventListener(MouseEvent.MOUSE_WHEEL, onMouseWheelZoomEvent);
				slideLoader.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
				slideLoader.addEventListener(MouseEvent.MOUSE_UP, onMouseUp);
				slideLoader.addEventListener(MouseEvent.MOUSE_OUT, onMouseOut);
				addEventListener(MouseEvent.MOUSE_MOVE, mouseCursorUpdateListener);
			}
			
			private function participantIsNowPresenter(presenter:Boolean):void {
				this.isPresenter = presenter;
			}
			
			/**
			 * Listen for mouse events to track the cursor.
			 */			
			public function mouseCursorUpdateListener(e:MouseEvent):void{
				if (noSlideContentLoaded()) return;	
				
				// cursor follow only presenter
				if ( true == isPresenter ){			
				    notifyOthersOfPresentersCursorPosition(this.mouseX, this.mouseY);
				}
			}
			
			/**
			 * Broadcast to other participants the location fo the mouse cursor.
			 */
			private function notifyOthersOfPresentersCursorPosition(cursorXPosition:int, cursorYPosition:int):void {
				var command:PresenterCommands = new PresenterCommands(PresenterCommands.SEND_CURSOR_UPDATE);				
				command.xPercent = cursorXPosition / this.width;
				command.yPercent = cursorYPosition / this.height;				
				dispatchEvent(command);
			}
			
			/**
			 * Handle notification from presenter about the location of the mouse cursor.
			 */
			private function handleUpdateCursorEvent(e:CursorEvent):void{
				if (noSlideContentLoaded()) return;
				
				cursor.x = e.xPercent * this.width;
				cursor.y = e.yPercent * this.height;
								
				if (isCursorOutsideWindow(e)) {
					hideCursor()
				} else {
					showCursor();
				}	
			}
			
			private function noSlideContentLoaded():Boolean {
				return slideLoader.content == null
			}
			
			/**
			 * Keep track of the presenter's x,y coordinates and the size of his/her presentation window.
			 */
			private function savePresentersSettings(xOffset:Number, yOffset:Number, widthRatio:Number, heightRatio:Number):void {
				presentersLoaderXOffsetFromCanvas = xOffset;
				presentersLoaderYOffsetFromCanvas = yOffset;
				presentersLoaderCanvasWidthRatio = widthRatio;
				presentersLoaderCanvasHeightRatio = heightRatio;
			}
			
			/*
			 * Fire an event when a single slide has been loaded.
			 */
			private function listenForSlideLoadedCompleteEvent():void {
				slideLoader.addEventListener(Event.COMPLETE, handleSlideLoadedCompleteEvent);
			}
			
			private function handleSlideLoadedCompleteEvent(event:Event):void {		
				var slideRealWidth:int = slideLoader.content.width;
				var slideRealHeight:int = slideLoader.content.height;
				
				// fix: maximize presentation window
				//fitLoaderToCanvas();
				if ( true == isPresenter){
				    // calculate slide width and height
                    slideLoader.height = gDefaultHeight;
                    slideLoader.width   =((gCurrentSlideWidth * slideLoader.height)/gCurrentSlideHeight);
                }
                fitSlideToLoader();
                resizeAndMoveLoaderInRelationToCanvas();

				dispatchNewSlideDisplayedEvent(slideRealWidth, slideRealHeight);
			}
			
			private function dispatchNewSlideDisplayedEvent(slideRealWidth:int, slideRealHeight:int):void {
				var dispEvent:DisplaySlideEvent = new DisplaySlideEvent(DisplaySlideEvent.DISPLAY_SLIDE_EVENT);
				dispEvent.slideWidth = slideRealWidth;
				dispEvent.slideHeight = slideRealHeight;
				dispatcher.dispatchEvent(dispEvent);
			}
						
			private function isCursorOutsideWindow(e:CursorEvent):Boolean {
				return (e.xPercent > 1 && e.yPercent > 1) || (cursor.x > this.width || cursor.y > this.height);
			}
			
			private function showCursor():void {
				cursor.visible = true;
			}
			
			private function hideCursor():void{
				cursor.visible = false;
			}			
			
			/** Inherited from IBbbCanvas*/
			public function addRawChild(child:DisplayObject):void{
				this.overlayChildrenHolder.rawChildren.addChild(child);
			}
			
			public function removeRawChild(child:DisplayObject):void{
				this.overlayChildrenHolder.rawChildren.removeChild(child);
			}
			
			public function doesContain(child:DisplayObject):Boolean{
				return this.overlayChildrenHolder.rawChildren.contains(child);
			}
			
			public function acceptOverlayCanvas(overlay:IBbbCanvas):void{
				overlayCanvas = overlay;
				var c:Canvas = overlay as Canvas;
				this.addChild(c);
				c.x = 0;
            	c.y = 0;
			}
			
			public function moveCanvas(x:int, y:int):void{
				overlayChildrenHolder.x = slideLoader.x * 2;
				overlayChildrenHolder.y = slideLoader.y * 2;
				
				if (overlayCanvas != null) overlayCanvas.moveCanvas(overlayChildrenHolder.x, overlayChildrenHolder.y);
			}
			
			public function zoomCanvas(width:int, height:int):void{
				overlayChildrenHolder.width = width;
				overlayChildrenHolder.height = height;
				moveCanvas(slideLoader.x, slideLoader.y);
				if (overlayCanvas != null) overlayCanvas.zoomCanvas(width, height);
			}
			
			public function showOverlayCanvas(show:Boolean):void{
				overlayCanvas.showCanvas(show);
			}
			
			public function showCanvas(show:Boolean):void{
				
			}
			
		]]>
	</mx:Script>
	
	<mx:SWFLoader id="slideLoader" width="100%" height="100%" creationComplete="listenForSlideLoadedCompleteEvent()"
    		scaleContent="false" maintainAspectRatio="true" showBusyCursor="true" completeEffect="Fade"/>   
    		
    <mx:HorizontalList id="thumbnailView" itemRenderer="org.bigbluebutton.modules.present.views.Thumbnail" itemRollOver="changeIndex(event)" 
    	visible="false" width="100%" height="100" y="{this.parent.height+15}" change="changeSlide()" /><!--_PTS_731_-->
		      		 
</mx:Canvas>
