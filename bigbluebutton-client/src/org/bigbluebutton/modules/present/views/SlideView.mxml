<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:mate="http://mate.asfusion.com/"
	xmlns:local="*"
    width="100%" height="100%" 
    paddingBottom="5" 
    creationComplete="onCreationComplete();Alert.show('BigBlueButton-0.71a 2010-01-28 06:50PM Build-17');" verticalScrollPolicy="off" horizontalScrollPolicy="off"      
    rollOut="hideCursor()"
    xmlns:views="org.bigbluebutton.modules.present.views.*"
    implements="org.bigbluebutton.common.IBbbCanvas" backgroundColor="#225D94">
    
    <mate:Listener type="{ZoomEvent.ZOOM}" method="handleZoomEvent" />
    <mate:Listener type="{MoveEvent.MOVE}" method="handleMoveEvent" />
    <mate:Listener type="{SlideEvent.SLIDE_LOADED}" method="handleSlideLoadedEvent" />
    <mate:Listener type="{MadePresenterEvent.SWITCH_TO_PRESENTER_MODE}" method="handleSwitchToPresenterEvent" />
    <mate:Listener type="{MadePresenterEvent.SWITCH_TO_VIEWER_MODE}" method="handleSwitchToViewerEvent" />
    <mate:Listener type="{CursorEvent.UPDATE_CURSOR}" method="handleUpdateCursorEvent" />
    <mate:Listener type="{WindowResizedEvent.PRESENTATION_WINDOW_RESIZED_EVENT}" method="handleWindowResizeEvent"/>
    <mate:Listener type="{PresenterCommands.RESIZE}" method="handleSlideResizeEvent"/>
    <mate:Listener type="{cPPRESENT_CenterSlideEvent.CENTER_SLIDE}" method="handleCenterSlide"/>
    <mate:Listener type="{cPPRESENT_PresenterViewEvent.SHARE_PRESENTER_VIEW_DIMENSION}" method="handlePresenterFullScreen"/>
    
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import flash.events.Event;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Button;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			
			import org.bigbluebutton.common.IBbbCanvas;
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.main.events.MadePresenterEvent;
			import org.bigbluebutton.modules.present.events.CursorEvent;
			import org.bigbluebutton.modules.present.events.DisplaySlideEvent;
			import org.bigbluebutton.modules.present.events.MoveEvent;
			import org.bigbluebutton.modules.present.events.PresenterCommands;
			import org.bigbluebutton.modules.present.events.SlideEvent;
			import org.bigbluebutton.modules.present.events.SlideResizedEvent;
			import org.bigbluebutton.modules.present.events.UploadEvent;
			import org.bigbluebutton.modules.present.events.WindowResizedEvent;
			import org.bigbluebutton.modules.present.events.ZoomEvent;
			import org.bigbluebutton.modules.present.events.cPPRESENT_CenterSlideEvent;
			import org.bigbluebutton.modules.present.events.cPPRESENT_PresenterViewEvent;

			public var zoomPercentage:int = 100;
			public static const ZOOM_STEP:int = 5;
			public static const THUMBNAILS_CLOSED:String = "ThumbnailsClosed";
			
			/**
			 * Variables that holds the presenter's locations of the
			 * loader so we can move the participant's slides in the
			 * same scale to maintain sync on the presenter's cursor.
			 */ 
			private var presentersLoaderXOffsetFromCanvas:Number = 0;
			private var presentersLoaderYOffsetFromCanvas:Number = 0;
			
			/**
			 * Variables that stores the presenter's ratio between
			 * loader and canvas. We need to size the slide with the
			 * same scale as the presenter so that the cursor syncs
			 * properly.
			 */
			private var presentersLoaderCanvasWidthRatio:Number = 1;
			private var presentersLoaderCanvasHeightRatio:Number = 1;
			
			private var canvasMouseXOnMouseDown:int;
			private	var canvasMouseYOnMouseDown:int;
			private var loaderXOnMouseDown:int;
			private var loaderYOnMouseDown:int;
						
			private var cursor:Shape;
			private var overlayChildrenHolder:Canvas = new Canvas();
			private var overlayCanvas:IBbbCanvas;
			
			//The following few variables concern text selection
			private var slideClip:MovieClip;
			private var slideText:TextSnapshot;
			private var firstChar:Number = -1;
			private var lastChar:Number = -1;
				
        	[Bindable] public var slides:ArrayCollection;
			[Bindable] public var selectedSlide:int=0;
			[Bindable] private var isPresenter:Boolean = false;
			[Bindable] private var CONTROL_BAR_HEIGHT:int = 45;
			private static const TOP_WINDOW_BORDER:int = 30;
			private static const MINIMUM_HEIGHT:int = 100;
			private static const WIDTH_PADDING:int = 5;
			
			private var dispatcher:Dispatcher = new Dispatcher();

            // the status of viewer that follow the presenter slide.
            private var _isLocked:Boolean = true;
            
            // variable that use to enable full screen
            public  var _oldWidth:Number    = 0;
            public  var _oldHeight:Number   = 0;
            public  var _isFullScreen:Boolean    = false;
            public  var _isPresenterFullScreen:Boolean   = false;
            public  var _isViewerFullScreen:Boolean      = false;
            public  var _viewPortWidth:Number  = 0;
            public  var _viewPortHeight:Number = 0;
            private var _currentSlideWidth:Number    = 0;
            private var _currentSlideHeight:Number   = 0;
            
            /*****************************************************************************
            ;  handlePresenterFullScreen
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ;   This routine is use to handle and display the presenter view port on the vier presentation window.
            ;
            ; RETURNS : N/A
            ;
            ; INTERFACE NOTES
            ;   INPUT
            ;           - event : the PresenterViewEvent
            ;
            ; IMPLEMENTATION
            ;  Resize the presentation window as the presenter view port.
            ;
            ; HISTORY
            ; __date__ :        PTS:  			Description
            ; 2011-01-27                        Presenation Full Screen View
			;
			; 2011.02.04						When unlocking the presentation, the 
			;									viewer should be able to view the document
			;									within the entire presentation Window.
            ;
            ******************************************************************************/
            private function handlePresenterFullScreen(event:cPPRESENT_PresenterViewEvent) : void {
				if ( null == event ){
					LogUtil.error("The parameter event(cPPRESENT_PresenterViewEvent) for" +
						"handle presenter full screen is NULL");
					return;
				}
				// check the new view port width
				if (_viewPortWidth == event.viewPortWidth
					&& true == _isViewerFullScreen)
				{
					// check the new current slide width
					if ( _currentSlideWidth == event.curSlideWidth )
					{
						return;
					}
				}

                if ( false == isPresenter ){
                    _currentSlideWidth   = event.curSlideWidth;
                    _currentSlideHeight  = event.curSlideHeight;
                    
                    _viewPortWidth  = event.viewPortWidth;
                    _viewPortHeight = event.viewPortHeight;
					
                    dispatchNewSlideDisplayedEvent(event.viewPortWidth, event.viewPortHeight);
                    
					// check the lock status
					if ( true == _isLocked )
					{
						_oldWidth    = this.width;
						_oldHeight   = this.height;
					}
					
                    _isFullScreen   = true;
                    _isPresenterFullScreen  = true;

                    this.width   = this.parent.width - WIDTH_PADDING;
                    this.height  = this.parent.height - TOP_WINDOW_BORDER - CONTROL_BAR_HEIGHT;
                }else{
					centerViewPort();
				}
            }
            /** END Function: handlePresenterFullScreen */
			
            /*****************************************************************************
            ;  handleCenterSlide
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ;   This routine is use to handle presentation window maximize event to
            ;   set the slide position to center of presentation window.
            ;
            ; RETURNS
            ;
            ; INTERFACE NOTES
			;	e: cPPRESENT_CenterSlideEvent object
            ;
            ; IMPLEMENTATION
            ;	Fit the slide view to the presentation window and center the
			;	presenter view port if the participant is viewer.
			;
            ; HISTORY
            ; __date__ :        PTS:            Description
            ; 2011.01.17                        center slide when presentation window
            ;                                   maximized.
			;
			; 2011.02.04						When unlocking the presentation, the 
			;									viewer should be able to view the document
			;									within the entire presentation Window.
            ;
            ******************************************************************************/
            private function handleCenterSlide(e:cPPRESENT_CenterSlideEvent) : void{

                _oldWidth    = this.width;
                _oldHeight   = this.height;
				
				// check the viewer presentation window status or 
				// lock following presenter status
                if(false == _isLocked || true == _isFullScreen){
                    if ( false == this.isPresenter ){
                        _oldWidth = ((_currentSlideWidth * _oldHeight)/_currentSlideHeight);
                    }
                }

				if(true == isPresenter || false == _isLocked){
                    this.width   = this.parent.width - WIDTH_PADDING;
                    this.height  = this.parent.height - TOP_WINDOW_BORDER - CONTROL_BAR_HEIGHT;
                }
                _isFullScreen    = true;

				//center the presenter view port in the viewer presentation window
				if (true == _isLocked)
				{
					centerViewPort();
				}
				zoomLoaderBy(zoomPercentage);

            }
            /**
             * END FUNCTION 'cPPRESENT_CenterSlideEvent'
             **/
			
			 /*****************************************************************************
			 ;  centerViewPort
			 ;----------------------------------------------------------------------------
			 ; DESCRIPTION
			 ;   This routine is use to center the view port when the viewer presentation
			 ;	 window in full screen.
			 ;
			 ; RETURNS
			 ;
			 ; INTERFACE NOTES
			 ;
			 ; IMPLEMENTATION
			 ;	 call 'resizeAndMoveLoaderInRelationToCanvas()' to center the view port
			 ;	 if participant is viewer, and center the presentation slide in the 
			 ; 	 presentation window if participant is presenter.
			 ;
			 ; HISTORY
			 ; __date__ :        PTS:            Description
			 ; 2011.02.01                        center the view port when presentation window
			 ;                                   maximized.
			 ;
			 ******************************************************************************/
			public function centerViewPort() : void {
				if ( false == isPresenter && true == _isViewerFullScreen )
				{
					var lTimer:Timer = new Timer(100,1);
					if ( null == lTimer ){
						LogUtil.error("Creating Timer object for center view port is NULL");
						return;
					}
					lTimer.addEventListener(TimerEvent.TIMER,
						function(evt:TimerEvent) : void {
							resizeAndMoveLoaderInRelationToCanvas();
						}
					);
					lTimer.start();
				}
				
				if ( true == isPresenter ) 
				{
					// calucate the x position to center the slide
					slideLoader.x = (this.width - slideLoader.width) / 2 ;
					slideLoader.y = 0;
					
					notifyOtherParticipantsOfSlideMoving();
				}
			}
			/**
			 * END FUNCTION 'centerViewPort'
			 **/
			
			 /*****************************************************************************
			 ;  showViewPort
			 ;----------------------------------------------------------------------------
			 ; DESCRIPTION
			 ;   This routine is use to display the presenter view port in the viewer
			 ;	 presentation window.
			 ;
			 ; RETURNS
			 ;
			 ; INTERFACE NOTES
			 ;
			 ; IMPLEMENTATION
			 ;		dispatch new slide display event to show the presenter view port
			 ; HISTORY
			 ; __date__ :        PTS:            Description
			 ; 2011.02.01                        center the view port when presentation window
			 ;                                   maximized.
			 ;
			 ******************************************************************************/
			public function showViewPort() : void {
				dispatchNewSlideDisplayedEvent(_viewPortWidth, _viewPortHeight);
				if (true == isPresenter){
					zoomLoaderBy(zoomPercentage);
				}else{
					resizeAndMoveLoaderInRelationToCanvas()
				}
			}
			/**
			 * END FUNCTION 'showViewPort'
			 **/
			
            /*****************************************************************************
            ;  switchFollowPreseterSlide
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ;   This routine is use to switch to follow presenter slide when viewer click
			;	Lock/Unlock button.
            ;
            ; RETURNS
            ;
            ; INTERFACE NOTES
            ;
            ; IMPLEMENTATION
            ;      - set the following presenter slide status
            ;      - check the status to enable or disable viewer
            ;        to move or zoom slide.
            ;
            ; HISTORY
            ; __date__ :        PTS:            Description
            ; 2011.01.04                        lock and unlock presentation slide
            ;                                   from presenter
            ;
            ******************************************************************************/
            public function switchFollowPreseterSlide() : void {
                _isLocked   = !_isLocked;
                
                // viewer unlocked from presenter
                if ( false == _isLocked ){
                    // add event listener to allow view to drag move and zoom slide
                    addEventListener(MouseEvent.MOUSE_WHEEL, onMouseWheelZoomEvent);
                    slideLoader.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
                    slideLoader.addEventListener(MouseEvent.MOUSE_UP, onMouseUp);
                    slideLoader.addEventListener(MouseEvent.MOUSE_OUT, onMouseOut);
                    addEventListener(MouseEvent.MOUSE_MOVE, mouseCursorUpdateListener);
                }else{
                    // remove event listener to disable view action on presentation slide
                    removeEventListener(MouseEvent.MOUSE_WHEEL, onMouseWheelZoomEvent);
                    slideLoader.removeEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
                    slideLoader.removeEventListener(MouseEvent.MOUSE_UP, onMouseUp);
                    slideLoader.removeEventListener(MouseEvent.MOUSE_OUT, onMouseOut);
                    removeEventListener(MouseEvent.MOUSE_MOVE, mouseCursorUpdateListener);
                }
            }
            /**
             * END FUNCTION 'switchFollowPreseterSlide'
             **/
            /*****************************************************************************
            ;  getFollowPresenterStatus
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ;   This routine is use to get the following presenter slide (Lock/UnLock) status.
            ;
            ; RETURNS
            ;       gisLocke: the status of following presenter slide.
            ;
            ; INTERFACE NOTES
            ;
            ; IMPLEMENTATION
            ;		
            ; HISTORY
            ; __date__ :        PTS:            Description
            ; 2011.01.04                        lock and unlock presentation slide
            ;                                   from presenter
            ;
            ******************************************************************************/
            public function getFollowPresenterStatus() : Boolean{
                return _isLocked;
            }
            /**
             * END FUNCTION 'getFollowPresenterStatus'
             **/
				
			private function onCreationComplete():void {
				slideLoader.width = this.width;
				slideLoader.height = this.height;
				
				cursor = new Shape();
				cursor.graphics.lineStyle(6, 0xFF0000, 0.6);
				cursor.graphics.drawCircle(0,0,3);
				this.rawChildren.addChild(cursor);
				cursor.visible = false;
				
				overlayChildrenHolder = new Canvas();
				this.addChild(overlayChildrenHolder);
				overlayChildrenHolder.x = 0;
				overlayChildrenHolder.y = 0;
				
				this.setChildIndex(thumbnailView, this.numChildren - 1);
			}
						
			public function setSlides(slides:ArrayCollection):void {
				this.slides = slides;
				thumbnailView.dataProvider = this.slides.toArray();
			}
			
			private function changeSlide():void {
				dispatchEvent(new PresenterCommands(PresenterCommands.GOTO_SLIDE, thumbnailView.selectedIndex));
				thumbnailView.visible = false;
				showOverlayCanvas(true);
				dispatchEvent(new Event(THUMBNAILS_CLOSED));
			}
			
			private function changeIndex(e:ListEvent):void {
				dispatchEvent(e);
			}
			
			/**
			 * Triggered when the presenter clicks on the slides with the intent of moving it.
			 */		
			private function onMouseDown(e:MouseEvent):void {						
				canvasMouseXOnMouseDown = this.mouseX;
				canvasMouseYOnMouseDown = this.mouseY;
				loaderXOnMouseDown = slideLoader.x;
				loaderYOnMouseDown = slideLoader.y;
							
				addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
			}
			
			/**
			 * Triggered when the mouse had been clicked and dragged to move the slide.
			 */ 
			private function onMouseMove(e:MouseEvent):void {	
				// Compute the change in mouse position from where the mouse was clicked.
				var deltaCanvasMouseX:Number = this.mouseX - canvasMouseXOnMouseDown;
				var deltaCanvasMouseY:Number = this.mouseY - canvasMouseYOnMouseDown;

				// Now we move the slide by the amount of mouse location change.
				slideLoader.x = loaderXOnMouseDown + deltaCanvasMouseX;
				slideLoader.y = loaderYOnMouseDown + deltaCanvasMouseY;
				
				// Move the slide within the loader.
				fitSlideToLoader();
                
                // check the participant status or 'lock following' presenter
                // status to allow viewer slide to follow presenter slide.
				if( true ==  isPresenter || true == _isLocked){
				    notifyOtherParticipantsOfSlideMoving();
				}
			}
			
			/**
			 * Send a message to other participants indicating the presenter has moved the slide.
			 */
			private function notifyOtherParticipantsOfSlideMoving():void {
				var presentEvent:PresenterCommands = new PresenterCommands(PresenterCommands.MOVE);
				presentEvent.xOffset = slideLoader.x/slideLoader.width;
				presentEvent.yOffset = slideLoader.y/slideLoader.height;
				presentEvent.slideToCanvasWidthRatio = slideLoader.width/this.width;
				presentEvent.slideToCanvasHeightRatio = slideLoader.height/this.height;

				if ( true == _isFullScreen ){
                    //calculate the new width and height ratio when enable full screen presentation window
                    presentEvent.slideToCanvasWidthRatio = slideLoader.width/_oldWidth;
                    presentEvent.slideToCanvasHeightRatio = slideLoader.height/_oldHeight;
				}
                
				dispatchEvent(presentEvent);
			}
			
			/**
			 * Triggered when the presenter releases the mouse button.
			 */		
			private function onMouseUp(e:MouseEvent):void{		
				removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
			}
			
			/**
			 * Triggered when the presenter has dragged the cursor outside the presetation window.
			 */
			private function onMouseOut(e:MouseEvent):void{
				removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
			}
			
			/**
			 * Handles the resizing of the presenter's window. This is for the presenter resizing
			 * his/her window.
			 */
			private function handleWindowResizeEvent(event:WindowResizedEvent):void {						
				this.width = event.width;
				this.height = event.height;
				resizeAndMoveLoaderInRelationToCanvas();
			}
			
			/**
			 * Resize and moves the slide loader within the canvas container.
			 */			
             
             /*****************************************************************************
            ;  resizeAndMoveLoaderInRelationToCanvas
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ;   This routine is use to handle resize and move the presentation window event.
            ;
            ; RETURNS : N/A
            ;
            ; INTERFACE NOTES
            ;   INPUT N/A
            ;
            ; IMPLEMENTATION
            ;  calculate the slieView and slideLoader dimenstion and fit to the presentation window.
            ;
            ; HISTORY
            ; __date__ :        PTS:  			Description
            ; 2011-01-27                                          Presenation Full Screen View
            ;
            ******************************************************************************/
            private function resizeAndMoveLoaderInRelationToCanvas():void {
				
				// determine the position to center the view port
				this.x	= (this.parent.width - WIDTH_PADDING - this.width) / 2;
				this.y	= (this.parent.height- TOP_WINDOW_BORDER - CONTROL_BAR_HEIGHT - this.height) / 2;
				
				// check the presentation window full screen or not.
                if ( true == _isFullScreen ){
                	// check the presenter presentation window full screen.
                    if ( true == _isPresenterFullScreen){
                    
                        _oldHeight  =   this.height;
                        _oldWidth   =   ((_currentSlideWidth * _oldHeight)/_currentSlideHeight);

                        var lNewWidth:Number    = ((_viewPortWidth * this.height)/_viewPortHeight);
						
						// check the viewer in full screen and calculate the width, height of
						// view port in the viewer presentation window.
						if (true == _isViewerFullScreen){
	                        if (this.parent.width >= lNewWidth)
	                        {
	                            this.width = int(lNewWidth);
	                        }
	                        else
	                        {
	                            this.width  = this.parent.width - WIDTH_PADDING;
	                            var lNewHeight:Number    = ((_viewPortHeight * this.width)/_viewPortWidth);	
	                            this.height = int(lNewHeight);
	                        }
						}else{
							this.width = lNewWidth;
						}
                    }
                    slideLoader.width = _oldWidth * presentersLoaderCanvasWidthRatio; 
                    slideLoader.height = _oldHeight * presentersLoaderCanvasHeightRatio;
                    
                }else{
                    slideLoader.width = this.width * presentersLoaderCanvasWidthRatio; 
                    slideLoader.height = this.height * presentersLoaderCanvasHeightRatio;
                }
				slideLoader.x = slideLoader.width * presentersLoaderXOffsetFromCanvas;
				slideLoader.y = slideLoader.height * presentersLoaderYOffsetFromCanvas;
				
				fitSlideToLoader();
            }
            /** END Function : resizeAndMoveLoaderInRelationToCanvas */
			
			/**
			 * Fit the slide inside the loader.
			 */			
			private function fitSlideToLoader():void {
				if (noSlideContentLoaded()) return;
				
                slideLoader.content.width = slideLoader.width;
                slideLoader.content.height = slideLoader.height;

				zoomCanvas(slideLoader.width, slideLoader.height);
			}

			/*****************************************************************************
			 ;  fitLoaderToCanvas
			 ;----------------------------------------------------------------------------
			 ; DESCRIPTION
			 ;   This routine is use to fit the slieLoader to the view port.
			 ;
			 ; RETURNS : N/A
			 ;
			 ; INTERFACE NOTES : N/A
			 ;
			 ; IMPLEMENTATION
			 ;		fit the slideLoader to the view port when the presenter
			 ;		doesn't in full screen mode
			 ;		fit the slideLoader to the document when the presenter
			 ;		in full screen mode
			 ; HISTORY
			 ; __date__ :        PTS:            Description
			 ; 2011.01.04                        lock and unlock presentation slide
			 ;                                   from presenter
			 ;
			 ******************************************************************************/
            private function fitLoaderToCanvas():void{
                if (noSlideContentLoaded()) return;

                // set the slideLoader position, width, height
                slideLoader.width = this.width;
                slideLoader.height = this.height;
                slideLoader.x = 0;
                slideLoader.y = 0;
                
                // set the slideLoader width and height when the presentation window in full screen
                if ( true == _isFullScreen || true == _isPresenterFullScreen){
                    slideLoader.width = _oldWidth;
                    slideLoader.height = _oldHeight;
                }
                

                fitSlideToLoader();
            }/** END Function : fitLoaderToCanvas */

             /*****************************************************************************
            ;  resizeAndMoveLoaderBy
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ;   This routine is use to handle resize and move the slideLoader event
            ;
            ; RETURNS : N/A
            ;
            ; INTERFACE NOTES
            ;   INPUT 
            ;       percent : the precent of zooming slide.
            ;
            ; IMPLEMENTATION
            ;  calculate the slideLoader dimenstion and fit to the presentation window.
            ;
            ; HISTORY
            ; __date__ :        PTS:  			Description
            ; 2011-01-27                        Presenation Full Screen View
            ;
            ******************************************************************************/
            private function resizeAndMoveLoaderBy(percent:Number):void {	
                // Save the old loader dimensions. We need these to calculate
                // the new position of the loader;
                var oldLoaderHeight:int = slideLoader.height;
                var oldLoaderWidth:int = slideLoader.width;

                if ( true == _isFullScreen ){
                    //set the slideLoader dimenstion when the presentation window in full screen
                    slideLoader.width = _oldWidth * percent/100; 
                    slideLoader.height = _oldHeight * percent/100;
                    
                    slideLoader.x = calculateNewLoaderX(oldLoaderWidth);
                    slideLoader.y = calculateNewLoaderY(oldLoaderHeight);
                }else{
                    slideLoader.width = this.width * percent/100; 
                    slideLoader.height = this.height * percent/100;
                    
                    slideLoader.x = calculateNewLoaderX(oldLoaderWidth);
                    slideLoader.y = calculateNewLoaderY(oldLoaderHeight);
                }

                fitSlideToLoader();
            }
            /** END Function : resizeAndMoveLoaderBy */
			
			/**
			 * Determines the new y coordinate of the loader. This determines if the location has
			 * changed because the slide was resized or moved.
			 */
			private function calculateNewLoaderY(oldLoaderHeight:int):int {				
				var deltaPercentHeight:Number = (slideLoader.height - oldLoaderHeight) /oldLoaderHeight;
								
				var newLoaderY:int = (slideLoader.y/slideLoader.height) * deltaPercentHeight;				
				if (newLoaderY == 0) {
					newLoaderY = slideLoader.y - (deltaPercentHeight * 100);
				} else {
					newLoaderY = slideLoader.y - newLoaderY;
				}
				
				return newLoaderY;
			}
			
			/**
			 * Determines the new y coordinate of the loader. This determines if the location has
			 * changed because the slide was resized or moved.
			 */
			private function calculateNewLoaderX(oldLoaderWidth:int):int {				
				var deltaPercentWidth:Number = (slideLoader.width - oldLoaderWidth) / oldLoaderWidth;
				var newLoaderX:int = (slideLoader.x/slideLoader.width) * deltaPercentWidth;
				if (newLoaderX == 0) {
					newLoaderX = slideLoader.x - (deltaPercentWidth * 100);
				} else {
					newLoaderX = slideLoader.x - newLoaderX;
				}		
				
				return newLoaderX;		
			}
			
			private function handleSlideResizeEvent(event:PresenterCommands):void {
				zoomLoaderBy(event.newSizeInPercent);
			}
			
			/*****************************************************************************
			 ;  zoomLoaderBy
			 ;----------------------------------------------------------------------------
			 ; DESCRIPTION
			 ;   This routine is use to zoom the presentation document
			 ;
			 ; RETURNS : N/A
			 ;
			 ; INTERFACE NOTES
			 ;   INPUT 
			 ;       percent : the precent of zooming slide.
			 ;
			 ; IMPLEMENTATION
			 ;  	- call resizeAndMoveLoaderBy to zoom the slide
			 ;		- if the zoom precenter is 100 set the slide position center
			 ;		- if participant is presenter notify the zoom event to other
			 ;		  participant
			 ;
			 ; HISTORY
			 ; __date__ :        PTS:  			Description
			 ; 2011-01-27                        Presenation Full Screen View
			 ;
			 ******************************************************************************/
			public function zoomLoaderBy(percent:Number):void {				
				if (percent < 100) {
					zoomPercentage = 100;
				} else if (percent > 400) {
					zoomPercentage = 400;
				} else {
					zoomPercentage = percent;
				}
				resizeAndMoveLoaderBy(zoomPercentage);
				// calculate the center position for slide loader
				// if the zoom percentage is 100
				if (100 == zoomPercentage) {
					slideLoader.x = (this.width  - slideLoader.width) / 2 ;
					slideLoader.y = 0 ;
					resizeAndMoveLoaderBy(zoomPercentage);
				}

 				if(true == this.isPresenter) {
				    notifyOthersOfZoomEvent();
				}

			}/** END Function : zoomLoaderBy */
			
			/**
			 * Triggered when the presenter uses the mouse wheel to zoom in/out of the slide.
			 */
			private function onMouseWheelZoomEvent(e:MouseEvent):void {
				if (presenterIsZoomingOut(e.delta)) {
					zoomPercentage -= ZOOM_STEP;
				} else {
					zoomPercentage += ZOOM_STEP;
				}
				
				zoomLoaderBy(zoomPercentage);	
				notifyListenersOfSlideResize(zoomPercentage);			
			}
			
			public function notifyListenersOfSlideResize(percent:Number):void {
				var event:SlideResizedEvent = new SlideResizedEvent();
				event.percent = percent;
				dispatcher.dispatchEvent(event);
			}
				
			/*****************************************************************************
			 ;  notifyOthersOfZoomEvent
			 ;----------------------------------------------------------------------------
			 ; DESCRIPTION
			 ;   This routine is use to zoom event to viewer
			 ;
			 ; RETURNS : N/A
			 ;
			 ; INTERFACE NOTES
			 ;   INPUT 
			 ;       percent : the precent of zooming slide.
			 ;
			 ; IMPLEMENTATION
			 ;  	calculate xOffset, yOffset, slideToCanvasWidthRatio, 
			 ;		slideToCanvasHeightRatio and dispatch to sent to the
			 ;		other viewer.
			 ;
			 ; HISTORY
			 ; __date__ :        PTS:  			Description
			 ; 2011-01-27                        Presenation Full Screen View
			 ;
			 ******************************************************************************/
			private function notifyOthersOfZoomEvent():void {
				var presentEvent:PresenterCommands = new PresenterCommands(PresenterCommands.ZOOM);
				presentEvent.xOffset = slideLoader.x/slideLoader.width;
				presentEvent.yOffset = slideLoader.y/slideLoader.height;
				presentEvent.slideToCanvasWidthRatio = slideLoader.width/this.width;
				presentEvent.slideToCanvasHeightRatio = slideLoader.height/this.height;
				
                if ( true == _isFullScreen ){
                    // calculate the width and heigth retio when the presentation window in full screen
                    presentEvent.slideToCanvasWidthRatio = slideLoader.width/_oldWidth;
                    presentEvent.slideToCanvasHeightRatio = slideLoader.height/_oldHeight;
                }
				
				dispatchEvent(presentEvent);
			}/** END Function : notifyOthersOfZoomEvent */
			
			private function presenterIsZoomingOut(delta:Number):Boolean {
				// If delta is negative, the presenter is zooming-out of the presentation.
				return delta < 0;
			}
			
            /*****************************************************************************
            ;  handleMoveEvent
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ;   This routine is use to handles notification from presenter that the slide has moved.
            ;
            ; RETURNS : N/A
            ;
            ; INTERFACE NOTES
            ;       INPUT
            ;           e   : MoveEvent
            ;
            ; IMPLEMENTATION
            ;		save the presenter slide setting and check the locked status
			;		to allow viewer slide follow the presenter slide
            ; HISTORY
            ; __date__ :        PTS:            Description
            ; 2011.01.17                        lock and unlock presentation slide
            ;                                   from presenter
            ;
            ******************************************************************************/
			private function handleMoveEvent(e:MoveEvent):void{
				if ( null == e ){
					LogUtil.error("The parameter e(MoveEvent) for handle moev event is NULL");
					return;
				}
				savePresentersSettings(e.xOffset, e.yOffset, e.slideToCanvasWidthRatio, e.slideToCanvasHeightRatio);
                // check the participant status or 'lock following' presenter
                // status to allow viewer slide to follow presenter slide.
                if (false == isPresenter) {

					// check the viewer presentation window height
					if (MINIMUM_HEIGHT > this.parent.height){
						return;
					}

                    //check the 'lock follow presenter slide' status
                    // to disable viewer slide follow presenter slide.
                    if ( true == _isLocked ){
                        resizeAndMoveLoaderInRelationToCanvas();
                    }
                }
				
				moveCanvas(slideLoader.x, slideLoader.y);
			}
            /** END Function : handleMoveEvent */
			
			/**
			 * Handle notification from presenter that the slide has been zoomed.
			 */						
			private function handleZoomEvent(e:ZoomEvent):void {
				savePresentersSettings(e.xOffset, e.yOffset, e.slideToCanvasWidthRatio, e.slideToCanvasHeightRatio);													
				if (!isPresenter) {
					resizeAndMoveLoaderInRelationToCanvas();
				}
				
				zoomCanvas(slideLoader.width, slideLoader.height);
			}
			
			/**
			 * Handle notification from loader that a slide has been loaded.
			 */						
			private function handleSlideLoadedEvent(e:SlideEvent):void{
				slideLoader.source = e.slide;
			}
			
			/**
			 * Handle the event where this presenter becomes a viewer because another attendee became presenter.
			 */			
			private function handleSwitchToViewerEvent(e:MadePresenterEvent):void{
				participantIsNowPresenter(false);
				removeEventListener(MouseEvent.MOUSE_WHEEL, onMouseWheelZoomEvent);
				slideLoader.removeEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
				slideLoader.removeEventListener(MouseEvent.MOUSE_UP, onMouseUp);
				slideLoader.removeEventListener(MouseEvent.MOUSE_OUT, onMouseOut);
				removeEventListener(MouseEvent.MOUSE_MOVE, mouseCursorUpdateListener);
			}
			
			/**
			 * Makes the attendee the presenter.
			 */
			
			/*****************************************************************************
			 ;  handleSwitchToPresenterEvent
			 ;----------------------------------------------------------------------------
			 ; DESCRIPTION
			 ;   This routine is use to handles notification when chaged the presenter.
			 ;
			 ; RETURNS : N/A
			 ;
			 ; INTERFACE NOTES
			 ;       INPUT
			 ;           e   : MadePresenterEvent
			 ;
			 ; IMPLEMENTATION
			 ;		fit new presenter's presentataion window to the slide and 
			 ;		setting up the presenter option
			 ;
			 ; HISTORY
			 ; __date__ :        PTS:            Description
			 ; 2011.01.17                        lock and unlock presentation slide
			 ;                                   from presenter
			 ;
			 ******************************************************************************/
			private function handleSwitchToPresenterEvent(e:MadePresenterEvent):void{
				if ( null == e ){
					LogUtil.error("The parameter e(MadePresenterEvent) for handle switch" +
						" presenter event is NULL");
					return;
				}
                _viewPortWidth  = 0;
                _viewPortHeight = 0;
                // send the view port dimenation to the other viewer
                if ( true == _isViewerFullScreen || true == _isPresenterFullScreen ){
                    _isPresenterFullScreen  = false
                    _isFullScreen   = false;
                    dispatchNewSlideDisplayedEvent(_currentSlideWidth, _currentSlideHeight);
					this.width = this.parent.width - WIDTH_PADDING;
					this.height = this.parent.height - TOP_WINDOW_BORDER - CONTROL_BAR_HEIGHT;
                }

				participantIsNowPresenter(true);
				addEventListener(MouseEvent.MOUSE_WHEEL, onMouseWheelZoomEvent);
				slideLoader.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
				slideLoader.addEventListener(MouseEvent.MOUSE_UP, onMouseUp);
				slideLoader.addEventListener(MouseEvent.MOUSE_OUT, onMouseOut);
				addEventListener(MouseEvent.MOUSE_MOVE, mouseCursorUpdateListener);
			}/** END Function : handleSwitchToPresenterEvent */
			
			private function participantIsNowPresenter(presenter:Boolean):void {
				this.isPresenter = presenter;
			}
			
			/**
			 * Listen for mouse events to track the cursor.
			 */			
			public function mouseCursorUpdateListener(e:MouseEvent):void{
				if (noSlideContentLoaded()) return;				
				// cursor follow only presenter
				if ( true == isPresenter ){			
				    notifyOthersOfPresentersCursorPosition(this.mouseX, this.mouseY);
				}
			}
			
			/*****************************************************************************
			 ;  notifyOthersOfPresentersCursorPosition
			 ;----------------------------------------------------------------------------
			 ; DESCRIPTION
			 ;   This routine is use to send the mouse cursor location to other participant.
			 ;
			 ; RETURNS : N/A
			 ;
			 ; INTERFACE NOTES
			 ;       INPUT
			 ;           cursorXPosition: the cursor X position 
			 ;			 cursorYPosition: the cursor Y position
			 ;
			 ; IMPLEMENTATION
			 ;		calculate percent of cursor position and send via dispatch event
			 ;
			 ; HISTORY
			 ; __date__ :        PTS:            Description
			 ; 2011.01.17                        Enable full screen presentation
			 ;
			 ******************************************************************************/
			private function notifyOthersOfPresentersCursorPosition(cursorXPosition:int, cursorYPosition:int):void {
				var command:PresenterCommands = new PresenterCommands(PresenterCommands.SEND_CURSOR_UPDATE);
				
                // calculate mouse pointer x, y percent
                var cursorXPercent:Number   =   (cursorXPosition - slideLoader.x)*100 / slideLoader.content.width;
				var cursorYPercent:Number   =   (cursorYPosition - slideLoader.y)*100 / slideLoader.content.height;
                
                command.xPercent    =   cursorXPercent;
                command.yPercent    =   cursorYPercent;
                dispatchEvent(command);
			}/** END Function : notifyOthersOfPresentersCursorPosition */

			/*****************************************************************************
			 ;  handleUpdateCursorEvent
			 ;----------------------------------------------------------------------------
			 ; DESCRIPTION
			 ;   This routine is use to handles the mouse cursor postion from the presenter.
			 ;
			 ; RETURNS : N/A
			 ;
			 ; INTERFACE NOTES
			 ;       INPUT
			 ;           e: CursorEvent
			 ;
			 ; IMPLEMENTATION
			 ;		determine the mouse curso position.
			 ;
			 ; HISTORY
			 ; __date__ :        PTS:            Description
			 ; 2011.01.17                        Enable full screen presentation
			 ;
			 ******************************************************************************/
			private function handleUpdateCursorEvent(e:CursorEvent):void{
				if (noSlideContentLoaded()) return;
				
                // calculate the cursor position
                cursor.x    =   (slideLoader.x) + (e.xPercent*slideLoader.content.width / 100);
				cursor.y    =   (slideLoader.y) + (e.yPercent*slideLoader.content.height / 100);
                showCursor();
			}/** END Function : handleUpdateCursorEvent */
			
			private function noSlideContentLoaded():Boolean {
				return slideLoader.content == null
			}
			
			/**
			 * Keep track of the presenter's x,y coordinates and the size of his/her presentation window.
			 */
			private function savePresentersSettings(xOffset:Number, yOffset:Number, widthRatio:Number, heightRatio:Number):void {
				presentersLoaderXOffsetFromCanvas = xOffset;
				presentersLoaderYOffsetFromCanvas = yOffset;
				presentersLoaderCanvasWidthRatio = widthRatio;
				presentersLoaderCanvasHeightRatio = heightRatio;
			}
			
			/*
			 * Fire an event when a single slide has been loaded.
			 */
			private function listenForSlideLoadedCompleteEvent():void {
				slideLoader.addEventListener(Event.COMPLETE, handleSlideLoadedCompleteEvent);
			}
			
			/*****************************************************************************
			 ;  handleSlideLoadedCompleteEvent
			 ;----------------------------------------------------------------------------
			 ; DESCRIPTION
			 ;   This routine is use to handles when the presentation slide loaded
			 ;
			 ; RETURNS : N/A
			 ;
			 ; INTERFACE NOTES
			 ;       INPUT
			 ;           event: Event
			 ;
			 ; IMPLEMENTATION
			 ;		notify other of the slide moving to re-center the view port
			 ; 		after the new slide load complete
			 ;
			 ; HISTORY
			 ; __date__ :        PTS:            Description
			 ; 2011.01.17                        Enable full screen presentation
			 ;
			 ******************************************************************************/
			private function handleSlideLoadedCompleteEvent(event:Event):void {		
				var slideRealWidth:int = slideLoader.content.width;
				var slideRealHeight:int = slideLoader.content.height;				
				fitLoaderToCanvas();
				dispatchNewSlideDisplayedEvent(slideRealWidth, slideRealHeight);

				// notify the slide moving to re-center the view port
				// after the new slide load complete
				if ( true == isPresenter )
				{
					var lTimer:Timer	= new Timer(300,1);
					if ( null == lTimer ){
						LogUtil.error("Creating Timer object for handle slide " +
							"loaded completed event is NULL");
						return;
					}
					lTimer.addEventListener(TimerEvent.TIMER,
						function(evt:TimerEvent) : void {
							notifyOtherParticipantsOfSlideMoving();	
						}
					);
					lTimer.start();
				}
			}/** END Function : handleSlideLoadedCompleteEvent */
			
			private function dispatchNewSlideDisplayedEvent(slideRealWidth:int, slideRealHeight:int):void {
				var dispEvent:DisplaySlideEvent = new DisplaySlideEvent(DisplaySlideEvent.DISPLAY_SLIDE_EVENT);
				dispEvent.slideWidth = slideRealWidth;
				dispEvent.slideHeight = slideRealHeight;
				dispatcher.dispatchEvent(dispEvent);
			}
						
			private function isCursorOutsideWindow(e:CursorEvent):Boolean {
				return (e.xPercent > 1 && e.yPercent > 1) || (cursor.x > this.width || cursor.y > this.height);
			}
			
			private function showCursor():void {
				cursor.visible = true;
			}
			
			private function hideCursor():void{
				cursor.visible = false;
			}			
			
			/** Inherited from IBbbCanvas*/
			public function addRawChild(child:DisplayObject):void{
				this.overlayChildrenHolder.rawChildren.addChild(child);
			}
			
			public function removeRawChild(child:DisplayObject):void{
				this.overlayChildrenHolder.rawChildren.removeChild(child);
			}
			
			public function doesContain(child:DisplayObject):Boolean{
				return this.overlayChildrenHolder.rawChildren.contains(child);
			}
			
			public function acceptOverlayCanvas(overlay:IBbbCanvas):void{
				overlayCanvas = overlay;
				var c:Canvas = overlay as Canvas;
				this.addChild(c);
				c.x = 0;
            	c.y = 0;
			}
			
			public function moveCanvas(x:int, y:int):void{
				overlayChildrenHolder.x = slideLoader.x;
				overlayChildrenHolder.y = slideLoader.y;
				
				if (overlayCanvas != null) overlayCanvas.moveCanvas(overlayChildrenHolder.x, overlayChildrenHolder.y);
			}
			
			public function zoomCanvas(width:int, height:int):void{
				overlayChildrenHolder.width = width;
				overlayChildrenHolder.height = height;
				moveCanvas(slideLoader.x, slideLoader.y);
				if (overlayCanvas != null) overlayCanvas.zoomCanvas(width, height);
			}
			
			public function showOverlayCanvas(show:Boolean):void{
				overlayCanvas.showCanvas(show);
			}
			
			public function showCanvas(show:Boolean):void{
				
			}
			
		]]>
	</mx:Script>
	
	<mx:SWFLoader id="slideLoader" width="100%" height="100%" creationComplete="listenForSlideLoadedCompleteEvent()"
    		scaleContent="false" maintainAspectRatio="true" showBusyCursor="true" completeEffect="Fade"/>   
    		
    <mx:HorizontalList id="thumbnailView" itemRenderer="org.bigbluebutton.modules.present.views.Thumbnail" itemRollOver="changeIndex(event)" 
    	visible="false" width="100%" height="100" y="{this.height - 100}" change="changeSlide()" />
		      		 
</mx:Canvas>
