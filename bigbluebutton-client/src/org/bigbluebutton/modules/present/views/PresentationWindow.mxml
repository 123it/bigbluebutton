<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
--> 


<pres:MDIWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:thumb="org.bigbluebutton.modules.present.views.*"
	xmlns:pres="flexlib.mdi.containers.*"
	xmlns:code="http://code.google.com/p/flexlib/" 
	xmlns:containers="flexlib.containers.*"
	xmlns:mate="http://mate.asfusion.com/"
	paddingBottom="0" paddingTop="0" paddingLeft="0" paddingRight="0" 
	showCloseButton="false" verticalScrollPolicy="off" horizontalScrollPolicy="off"
	implements="org.bigbluebutton.common.IBbbModuleWindow"
	creationComplete="onCreationComplete()" 
	width="{DEFAULT_WINDOW_WIDTH}" height="{DEFAULT_WINDOW_HEIGHT}" 
	x="{DEFAULT_X_POSITION}" y="{DEFAULT_Y_POSITION}"
	title="{currentPresentation}" keyUp="onKeyUp(event)"
	resize="maximizeHandler()" backgroundColor="0xDDDDDD"
	initialize="getConfig()">
	
	<mate:Dispatcher id="globalDispatcher" />
	<mate:Listener type="{MadePresenterEvent.SWITCH_TO_PRESENTER_MODE}" method="becomePresenter" />
	<mate:Listener type="{MadePresenterEvent.SWITCH_TO_VIEWER_MODE}" method="becomeViewer" />
	<mate:Listener type="{PresentationEvent.PRESENTATION_LOADED}" method="handlePresentationLoadedEvent" />
	<mate:Listener type="{NavigationEvent.GOTO_PAGE}" method="gotoPage" />
	<mate:Listener type="{UploadEvent.CLEAR_PRESENTATION}" method="clearPresentation" />
	<mate:Listener type="{SlideResizedEvent.SLIDE_RESIZED_EVENT}" method="handleSlideResizedEvent" />
	<mate:Listener type="{DisplaySlideEvent.DISPLAY_SLIDE_EVENT}" method="handleDisplaySlideEvent" />
	<mate:Listener type="{AddOverlayCanvasEvent.ADD_OVERLAY_CANVAS}" method="addOverlayCanvas" />
	<mate:Listener type="{AddButtonToPresentationEvent.ADD_BUTTON}" method="addButton" />
	
	
	<mate:Listener type="{cPPRESENT_PresenterViewEvent.NEW_PRESENTATION_LOAD}" method="handleNewPresentation" />	
	
	
	<mx:Script>
		<![CDATA[
			import flash.external.*;
			import flash.geom.Point;
			
			import flexlib.containers.DockableToolBar;
			import flexlib.mdi.events.MDIWindowEvent;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.containers.TitleWindow;
			import mx.controls.Alert;
			import mx.core.Application;
			import mx.effects.Move;
			import mx.events.ListEvent;
			import mx.events.ResizeEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.*;
			
			import org.bigbluebutton.common.IBbbCanvas;
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.main.events.MadePresenterEvent;
			import org.bigbluebutton.main.model.ConfigParameters;
			import org.bigbluebutton.main.views.MainCanvas;
			import org.bigbluebutton.modules.present.api.IPresentationButton;
			import org.bigbluebutton.modules.present.events.AddButtonToPresentationEvent;
			import org.bigbluebutton.modules.present.events.AddOverlayCanvasEvent;
			import org.bigbluebutton.modules.present.events.DisplaySlideEvent;
			import org.bigbluebutton.modules.present.events.MoveEvent;
			import org.bigbluebutton.modules.present.events.NavigationEvent;
			import org.bigbluebutton.modules.present.events.PresentationEvent;
			import org.bigbluebutton.modules.present.events.PresenterCommands;
			import org.bigbluebutton.modules.present.events.SlideEvent;
			import org.bigbluebutton.modules.present.events.SlideResizedEvent;
			import org.bigbluebutton.modules.present.events.UploadEvent;
			import org.bigbluebutton.modules.present.events.WindowResizedEvent;
			import org.bigbluebutton.modules.present.events.ZoomEvent;
			import org.bigbluebutton.modules.present.events.cPPRESENT_CenterSlideEvent;
			import org.bigbluebutton.modules.present.events.cPPRESENT_PresenterViewEvent;
			import org.bigbluebutton.modules.present.managers.Slide;
			import org.bigbluebutton.modules.present.managers.SlideManager;
			import org.bigbluebutton.util.i18n.ResourceUtil;

            public static const TITLE:String = "Presentation";
			private var presenterName:String = "";
			private static const NEXT_BUTTON:String = "Next";
			private static const PREVIOUS_BUTTON:String = "Previous";
			private static const GOTO_PAGE_BUTTON:String = "Go to Page..."
			
			private var images:Images = new Images();

			[Bindable] private var uploadIcon:Class = images.upload;
			[Bindable] private var forwardIcon:Class = images.forward;
			[Bindable] private var backwardIcon:Class = images.backward;
			[Bindable] private var magnifierIcon:Class = images.magnifier;
			[Bindable] public var fitToWidthIcon:Class = images.magnifier;

            // lock and unlock icon
			[Bindable] private var _lockedIcon:Class      = images.locked;
			[Bindable] private var _unlockedIcon:Class    = images.unlocked;
						
			[Bindable] private var thumbY:Number;
			public var uploadWindow:FileUploadWindow = null;
			private var slideManager:SlideManager = new SlideManager();
			private var pageDialog:GotoPageDialog;
			
			[Bindable] private var DEFAULT_X_POSITION:int = 237;
			[Bindable] private var DEFAULT_Y_POSITION:int = 0;
			
			[Bindable] private var CONTROL_BAR_HEIGHT:int = 45;
			private static const TOP_WINDOW_BORDER:int = 30;
			private static const WIDTH_PADDING:int = 5;

			[Bindable] private var DEFAULT_WINDOW_WIDTH:int = 510;
			[Bindable] private var DEFAULT_WINDOW_HEIGHT:int = 451;
						
			// Init to the size of the window.
			private var currentSlideWidth:int = DEFAULT_WINDOW_WIDTH;
			private var currentSlideHeight:int = DEFAULT_WINDOW_HEIGHT;
									
			private var mouseDown:Boolean = false;
			[Bindable] private var isPresenter:Boolean = false;
			[Bindable] private var presentationLoaded:Boolean = false;
			[Bindable] private var currentPresentation:String = ResourceUtil.getInstance().getString('bbb.presentation.title');
			
			private var externalButtons:ArrayCollection = new ArrayCollection();
			
            //the variable that hold the value for fixing the problem when enable the
            // the presentation window full screen
            private var _isMinimized:Boolean  = false;
			private static const TIMER_INTERVAL:int = 1000;
			public var _isPresentationLoaded:Boolean = false;
			
			/**
			 * the variable that hold value from config file to
			 * enable or disable unlock button
			 **/
			private var isShowUnlockButton:Boolean = false;

            /*****************************************************************************
            ;  maximizeHandler
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ;   This routine is use to handle maximize or presentation window resize event.
            ;
            ; RETURNS : N/A
            ;
            ; INTERFACE NOTES: N/A
            ;
            ; IMPLEMENTATION
            ;  - if the window is maximized : center the presentation slide and show 
			;  enable/disable chat notification button.
			;  - share the presenter view port if participant is presenter.
			;  - show the presenter view port if participant is viewer.
			;
            ; HISTORY
            ; __date__ :        PTS:  			Description
            ; 2011.01.27                        Funll screen presenation window
			;									and center the view port.
            ;
            ******************************************************************************/
            private function maximizeHandler():void {
                
				var centerSlideEvent:cPPRESENT_CenterSlideEvent = new cPPRESENT_CenterSlideEvent(
												cPPRESENT_CenterSlideEvent.CENTER_SLIDE
												);
				if (null == centerSlideEvent){
					LogUtil.error("Creating cPPRESENT_CenterSlideEvent object is NULL");
					return;
				}
                // check the status when the window switch from minimize to normal.
                if ( true == _isMinimized && false == this.minimized ){
					
					var tMinimize:Timer = new Timer(TIMER_INTERVAL, 1);
					if (null == tMinimize){
						LogUtil.error("Creating Timer object is NULL");
						return;	
					}
                    tMinimize.addEventListener(TimerEvent.TIMER, 
						function(evt:TimerEvent):void{
							_isMinimized = false;
							if(false == isPresenter){
								dispatchEvent(centerSlideEvent);	
							}
						}
					);
                    tMinimize.start();
					
                    return;
					
                }
				
                // check the status when the window switch from minimize to maximize.
                if ( true == this.minimized && true == this.slideView._isViewerFullScreen ) {
                    _isMinimized = true;
                    return;
                }
				// When the window is maximized, we want to resize the slide maintaining the aspect ratio.			
				fitSlideToWindowMaintainingAspectRatio();

                this.y = 0;
                if (true == this.maximized) {
                    //callLater(restore);
                    if (true == ExternalInterface.available) 
                    {
                       // call javascript function 'showButton to
                       // display enable or disable chat notificaiton
                       ExternalInterface.call("showButton", true);
                    } 
                    
                    // set the viewer presentation window status
                    this.slideView._isViewerFullScreen  = true;
                    dispatchEvent(centerSlideEvent);

                    // share the view port the the viewer if is presenter.
                    if ( true == isPresenter ){
						dispatchSendPresenterViewPort();
                    }
                }
                else
                {
                    if (true == ExternalInterface.available) 
                     {
                       // call javascript function 'showButton to
                       // display enable or disable chat notificaiton
                       ExternalInterface.call("showButton", false);
                     }
					
					var presentEvent:cPPRESENT_PresenterViewEvent = new cPPRESENT_PresenterViewEvent(cPPRESENT_PresenterViewEvent.REFRESH_SLIDE);
					if (null == presentEvent){
						LogUtil.error("Creating cPPRESENT_PresenterViewEvent object is NULL");
						return;
					}
					dispatchEvent(presentEvent);
					
					// show view port when switch widnow form maximize
					if ( false == isPresenter && true == this.slideView._isViewerFullScreen)
					{
						this.slideView.showViewPort();
					}

                     if ( true == slideView._isViewerFullScreen){
                        this.slideView._isViewerFullScreen  = false;
                     }
                    
                    // share view port the the viewer if is presenter
                    if ( true == isPresenter && true == slideView._isFullScreen){
						dispatchSendPresenterViewPort();
                    }
                    if ( false == slideView._isPresenterFullScreen ) {
                        slideView._isFullScreen = false;
                     }
					//this.slideView.zoomLoaderBy(this.slideView.zoomPercentage);
                }
				stage.focus = this; //Remove focus from the maximize button in case the user presses the space bar, the window doesn't get maximized again.
				
			}
			
			private function adjustPosition(t:TimerEvent):void{
				if ((DEFAULT_X_POSITION + this.width) > this.parent.width) {
					// Adjust presentation window so that it doesn't go over the side of the browser window
					this.x = this.parent.width - this.width;
				} else {
					// Move window so that it won't overlap with Participant's window.
					this.x = ((Capabilities.screenResolutionX / 20) * 3) + 10;
				}
			}
		
			private function onCreationComplete():void{
				thumbY = this.height - 160;
				addEventListener(MDIWindowEvent.RESIZE_END, onResizeEndEvent);
				slideView.addEventListener(ListEvent.ITEM_ROLL_OVER, onItemRollOver);
			}
			
			/*****************************************************************************
			;  getConfig
			;----------------------------------------------------------------------------
			; DESCRIPTION
			;   This routine is use to get the presentation configuration to show or
			;	 hide the lock/unlock presentation button at the viewer side.
			;
			; RETURNS : N/A
			;
			; INTERFACE NOTES
			; 
			;       INPUT : N/A
			; 
			; IMPLEMENTATION
			;  get the value showUnlockButton value from config file and
			;	show the lock/unlock button.
			;
			; HISTORY
			; __date__ :        PTS:            Description
			; 2011.02.04        				 enable or disable lock/unlock button
			;
			******************************************************************************/
			private function getConfig() : void {
				var configParameters:ConfigParameters = new ConfigParameters(
					function() : void 
					{
						var xmlModules:XMLList  =   configParameters.getModulesXML();
						if (null == xmlModules){
							LogUtil.error("Getting XMLList from configurataion file is NULL");
							return;
						}
						var item:XML;
						for each(item in xmlModules)
						{
							var attNamesList:XMLList = item.@*;
							var name:String = item.attribute(attNamesList[0].name());
							if ('PresentModule' == name)
							{  
								var attName:XML;
								for each(attName in attNamesList)
								{
									if ('showUnlockButton' == attName.name())
									{
										// compare the showUnlockButton value
										if('true' == item.attribute(attName.name()).toLowerCase())
										{
											isShowUnlockButton = true;
											if (false == isPresenter)
											{
												lockButton.visible = true;
											}
										}
									}
								}
							}
						}
					}
				);
			}
			/** END Function : getConfig */
			
			private function onItemRollOver(e:ListEvent):void{
				this.displaySlideNumber(e.columnIndex + 1);
			}
			
			private function onResizeEndEvent(event:MDIWindowEvent):void {
				if (event.window == this) {
					fitSlideToWindowMaintainingAspectRatio();
				}
			}
			
			/*****************************************************************************
			 ;  dispatchSendPresenterViewPort
			 ;----------------------------------------------------------------------------
			 ; DESCRIPTION
			 ;   This routine is use to dispatch 'cPPRESENT_PresenterViewEvent' event to share the
			 ;	 presenter view port to other participants.
			 ;
			 ; RETURNS : N/A
			 ;
			 ; INTERFACE NOTES
			 ; 
			 ;       INPUT : N/A
			 ; 
			 ; IMPLEMENTATION
			 ;	dispatch cPPRESENT_PresenterViewEvent to share the presenter's view port information.
			 ;	
			 ; HISTORY
			 ; __date__ :        PTS:            Description
			 ; 2011.02.03        				 Full screen prsentation window and share
			 ;									 the view port to other participants.
			 ;
			 ******************************************************************************/
			private function dispatchSendPresenterViewPort() : void {
				var presentEvent:cPPRESENT_PresenterViewEvent = new cPPRESENT_PresenterViewEvent(cPPRESENT_PresenterViewEvent.UPDATE_PRESENTER_VIEW_DIMENSION);
				if (null == presentEvent){
					LogUtil.error("Creating cPPRESENT_PresenterViewEvent object is NULL");
					return;
				}
				presentEvent.curSlideWidth  = currentSlideWidth;
				presentEvent.curSlideHeight = currentSlideHeight;
				presentEvent.viewPortWidth  = this.width - WIDTH_PADDING;
				presentEvent.viewPortHeight  = this.height - CONTROL_BAR_HEIGHT - TOP_WINDOW_BORDER;

				dispatchEvent(presentEvent);
			}
			/** END Function : dispatchSendPresenterViewPort */
			
			 /*****************************************************************************
            ;  fitSlideToWindowMaintainingAspectRatio
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ;   This routine is used to fit the slide in loader.
            ;
            ; RETURNS : N/A
            ;
            ; INTERFACE NOTES
            ; 
            ;       INPUT : N/A
            ; 
            ; IMPLEMENTATION
            ;		Determine width, height of presentation window and slide
            ; HISTORY
            ; __date__ :        PTS:            Description
            ; 2010.12.28                        maximize presentation window
            ;
            ******************************************************************************/
			private function fitSlideToWindowMaintainingAspectRatio():void {
				if (this.minimized) return;
				
				// Initialize to snap to take the width of the window as the size of the slide.
				var slideWidth:int = this.width;
				var slideHeight:int = this.height;
				
				// If the height is smaller than the width, we use the height as the 
				// base to determine the size of the slide.
				if (this.height < this.width) {					
					slideHeight = this.height - CONTROL_BAR_HEIGHT - TOP_WINDOW_BORDER;
					slideWidth = ((currentSlideWidth * slideHeight)/currentSlideHeight);
				} else {
					slideWidth = this.width - WIDTH_PADDING;
					slideHeight = ((currentSlideHeight * slideWidth)/currentSlideWidth);
				}
				
				// set the viewer slide height to fit to the window when the presenter
				// in full screen
				if (true == slideView._isPresenterFullScreen){
				    slideHeight = this.height - CONTROL_BAR_HEIGHT - TOP_WINDOW_BORDER;
				    slideWidth = ((currentSlideWidth * slideHeight)/currentSlideHeight);
				}
				
				// check the window status, if it is not maximize fit the window to 
				// the slide
				if ( false == this.maximized ) {
				    this.width = slideWidth + WIDTH_PADDING;
				    this.height = slideHeight + CONTROL_BAR_HEIGHT + TOP_WINDOW_BORDER;
				}

				// Test if the height and width are bigger than it's parent. If so, resize
				// to make it fit inside so that the controls will still be visible.
				if (this.height > this.parent.height) {
					this.height = this.parent.height;
					slideHeight = this.height - CONTROL_BAR_HEIGHT - TOP_WINDOW_BORDER;
					slideWidth = ((currentSlideWidth * slideHeight)/currentSlideHeight);
				}				
				
				if (this.width > this.parent.width) {
					this.width = this.parent.width;
					slideWidth = this.width - WIDTH_PADDING;
					slideHeight = ((currentSlideHeight * slideWidth)/currentSlideWidth);
				}
				sendWindowResizedEvent(slideWidth, slideHeight);
			}/** END FUNCTION 'fitSlideToWindowMaintainingAspectRatio' **/
			
			/*
			 * Notify the slide container telling it the available dimensions to display the slide.
			 */
			private function sendWindowResizedEvent(slideWidth:int, slideHeight:int):void {
				var dispatcher:Dispatcher = new Dispatcher();
				var dispEvent:WindowResizedEvent = new WindowResizedEvent(WindowResizedEvent.PRESENTATION_WINDOW_RESIZED_EVENT);
				dispEvent.width = slideWidth;
				dispEvent.height = slideHeight;
				dispEvent.old_width = this.slideView.width;
				dispEvent.old_height = this.slideView.height;
				dispatcher.dispatchEvent(dispEvent);
			}
			
			
			/*****************************************************************************
			 ;  handleDisplaySlideEvent
			 ;----------------------------------------------------------------------------
			 ; DESCRIPTION
			 ;   this routine is to handle the slide display event
			 ;   
			 ; RETURNS : N/A
			 ;
			 ; INTERFACE NOTES
			 ;   INPUT
			 ;		event: the DisplaySlideEvent
			 ;
			 ; IMPLEMENTATION
			 ;		fit the slide to the window and dispatch share the presenter's
			 ;		view port if participant is presenter.
			 ; HISTORY
			 ; __date__ :        PTS:            Description
			 ; 2011.01.20						 full screen presentataion window
			 ******************************************************************************/
			private function handleDisplaySlideEvent(event:DisplaySlideEvent):void {	
				if ( null == event){
					LogUtil.error("The function parameter DisplaySlideEvent is NULL");
					return;
				}
				var centerSlideEvent:cPPRESENT_CenterSlideEvent = new cPPRESENT_CenterSlideEvent(
														cPPRESENT_CenterSlideEvent.CENTER_SLIDE
														);
				if (null == centerSlideEvent){
					LogUtil.error("Creating cPPRESENT_CenterSlideEvent object is NULL");
					return;
				}
				currentSlideWidth = event.slideWidth;
				currentSlideHeight = event.slideHeight;
				fitSlideToWindowMaintainingAspectRatio();
				
                dispatchEvent(centerSlideEvent);
				// send the view port to the viewer after the slide loaded.
				if ( true == slideView._isFullScreen && true == isPresenter ){
					if (true == isPresenter){
						var lTimer:Timer    = new Timer(TIMER_INTERVAL,1);
						if (null == lTimer){
							LogUtil.error("Creating Timer object is NULL");
							return;	
						}
						lTimer.addEventListener(TimerEvent.TIMER, 
							function(e:TimerEvent) : void {
								dispatchSendPresenterViewPort();
							}
						);
						lTimer.start();
					}
				}
			}/** END FUNCTION 'handleDisplaySlideEvent' **/
			
			private function onKeyUp(event:KeyboardEvent):void{
				
				// only presenter can presss key to change slide
				if ( false == isPresenter )
				{
					return;
				}
				
				switch (event.keyCode) {
				case Keyboard.LEFT:
				case Keyboard.UP:
				case Keyboard.PAGE_UP:				
					gotoPreviousSlide();		
				break;
				case Keyboard.DOWN:
				case Keyboard.RIGHT: 
				case Keyboard.SPACE:
				case Keyboard.PAGE_DOWN:
				case Keyboard.ENTER:
					gotoNextSlide();
				break; 
				}
			}
			
			public function getPrefferedPosition():String{
				return MainCanvas.MIDDLE;
			}
			
			/**
			 * Hide the thumbnails in case the user moves the mouse outside this window
			 */
			private function hideThumbs():void{
				if (slideView.slides != null)
					displaySlideNumber(slideView.selectedSlide + 1);
			}
			
			private function showThumbsXXX():void {
				 if (isPresenter){
					//readjust the position of the thumbnails in case the window was resized
					//Note: this is necessary because the MDIWindow does not let you listen to the resize() event!
					thumbY = this.height - 150;
				}				
			}
			
			private function onSliderZoom():void {
				dispatchResizeEvent(zoomSlider.value);
			}
			
			private function dispatchResizeEvent(newSize:int):void {
				var presentEvent:PresenterCommands = new PresenterCommands(PresenterCommands.RESIZE);
				presentEvent.newSizeInPercent = newSize;
				dispatchEvent(presentEvent);
			}
			
			private function onResetZoom():void {
				zoomSlider.value = 100;
				dispatchResizeEvent(zoomSlider.value);
			}
			
			private function handleSlideResizedEvent(e:SlideResizedEvent):void{
				zoomSlider.value = e.percent;
			}
						
			private function becomePresenter(e:MadePresenterEvent):void{
				setupPresenter(true, e.presenterName);
				addContextMenuItems();
			}
			
			private function becomeViewer(e:MadePresenterEvent):void{
				setupPresenter(false, e.presenterName);
				dispatchEvent(new UploadEvent(UploadEvent.CLOSE_UPLOAD_WINDOW));
				this.contextMenu = new ContextMenu();
				this.contextMenu.hideBuiltInItems();
			}
						
			private function setupPresenter(isPresenter:Boolean, presentersName:String):void {
				this.isPresenter = isPresenter;
				uploadPres.visible = isPresenter;

                /**
				 *  show or hide 'lock follow presenter slide' button
				 *	depending on isShowUnlockButton that get from config file.
				 * */
				if ( true == isShowUnlockButton )
				{
					lockButton.visible   = !isPresenter;
				}
				
				if (presentationLoaded) {
	            	displaySlideNumber(slideView.selectedSlide + 1);	
					displaySlideNavigationControls(isPresenter);
					showUploadPresentationLabel(false);
				} else {
					if (isPresenter)
						showUploadPresentationLabel(true);
					else
						showUploadPresentationLabel(false);
				}
				
				setPresentersName(presentersName);	
				notifyComponentsOfPresenterChange(isPresenter, presentersName);
			}
			
			private function setPresentersName(name:String):void {
				if (name != null) presenterName = name;
			}
			
			private function handlePresentationLoadedEvent(e:PresentationEvent):void {	
				if (e.presentationName == currentPresentation) return;
				var presenterViewEvent:cPPRESENT_PresenterViewEvent = new cPPRESENT_PresenterViewEvent(
												cPPRESENT_PresenterViewEvent.GET_PRESENTER_VIEW_DIMENSION
												);
				if ( null == presenterViewEvent ){
					LogUtil.error("Creating cPPRESENT_PresenterViewEvent object is NULL");
					return;
				}
				currentPresentation = e.presentationName;
				presentationLoaded = true;
				slideView.setSlides(e.slides.slides);    		            		
				slideView.visible = true;		
	
				if (slideManager != null) slideManager.clear();	
				
				showUploadPresentationLabel(false);
				displaySlideNumber(slideView.selectedSlide + 1);	
				if (isPresenter) {
					displaySlideNavigationControls(true);					
					notifyOthersOfSharingPresentation(e.presentationName);
				} else {
					dispatchEvent(new SlideEvent(SlideEvent.LOAD_CURRENT_SLIDE));
				}
				onResetZoom();
				reinitWindowToDefaultSize();
				//this.setFocus();
				
				_isPresentationLoaded = true;
			}
			
			private function displaySlideNavigationControls(show:Boolean):void {
				backButton.visible = show;
				forwardButton.visible = show;
				zoomSlider.visible = show;
				btnResetZoom.visible = show;
				btnSlideNum.visible = show;
				setButtonsVisibility(show);
			}
			
			private function addContextMenuItems():void{
				var contextMenu:ContextMenu = new ContextMenu();
				contextMenu.hideBuiltInItems();
				
				var nextButton:ContextMenuItem = new ContextMenuItem(NEXT_BUTTON);
				nextButton.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, menuItemHandler);
				contextMenu.customItems.push(nextButton);
				
				var previousButton:ContextMenuItem = new ContextMenuItem(PREVIOUS_BUTTON);
				previousButton.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, menuItemHandler);
				contextMenu.customItems.push(previousButton);
				
				var gotoPageButton:ContextMenuItem = new ContextMenuItem(GOTO_PAGE_BUTTON);
				gotoPageButton.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, menuItemHandler);
				contextMenu.customItems.push(gotoPageButton);
				
				this.contextMenu = contextMenu;
			}
			
			private function menuItemHandler(e:ContextMenuEvent):void{
				switch(e.target.caption){
					case NEXT_BUTTON:
						gotoNextSlide();
						break;
					case PREVIOUS_BUTTON:
						gotoPreviousSlide();
						break;
					case GOTO_PAGE_BUTTON:
						showPageDialog();
						break;
				}
			}
			
			private function showPageDialog():void{
				if (pageDialog != null) PopUpManager.removePopUp(pageDialog);
				pageDialog = new GotoPageDialog();
				pageDialog.totalSlides = slideView.slides.length;
				pageDialog.x = this.x + this.width/2 - pageDialog.width/2;
				pageDialog.y = this.y + this.height/2 - pageDialog.height/2;
				pageDialog.window = this;
				PopUpManager.addPopUp(pageDialog, this, false);
			}
			
			private function notifyOthersOfSharingPresentation(presentationName:String):void {
				var shareEvent:PresenterCommands = new PresenterCommands(PresenterCommands.SHARE_PRESENTATION_COMMAND);
					shareEvent.presentationName = presentationName;
					shareEvent.share = true;
					dispatchEvent(shareEvent);
			}
			
			private function gotoPage(e:NavigationEvent):void{
				loadPage(e.pageNumber);
			}
			
			public function loadPage(pageNumber:int):void{
				slideView.selectedSlide = pageNumber;
				
				if (validPageNumber(pageNumber)) {
					loadSlide(pageNumber);
					disableSlideNavigationButtons(pageNumber);
					displaySlideNumber(pageNumber + 1);
				}	
			}
			
			private function loadSlide(page:int):void {
				slideManager.load(slideView.slides.getItemAt(page) as Slide);
			}
			
			private function validPageNumber(pageNumber:int):Boolean {
				return (pageNumber <= slideView.slides.length-1 && pageNumber >= 0)
			}
			
			private function disableSlideNavigationButtons(pageNumber:int):void {
				if (pageNumber == 0) {
					backButton.enabled = false;
				} else {
					backButton.enabled = true;
				}
				
				if (pageNumber < slideView.slides.length - 1) {
					forwardButton.enabled = true;
				} else {
					forwardButton.enabled = false;
				}
			}
			
			private function displaySlideNumber(currentSlide:int):void {
				btnSlideNum.label = "" + currentSlide + '/' + slideView.slides.length;
			}
			
			private function clearPresentation(e:UploadEvent):void{
				slideView.visible = false;		
				slideView.slideLoader.source = null; 
				slideView.selectedSlide = 0;
				btnSlideNum.label = "";
				displaySlideNavigationControls(false);
				showUploadPresentationLabel(false);
				
				// Change the title of the window.
				currentPresentation = ResourceUtil.getInstance().getString('bbb.presentation.title');				
				reinitWindowToDefaultSize();
			}
			
			private function reinitWindowToDefaultSize():void {
				if ((this.width < DEFAULT_WINDOW_WIDTH) || (this.height < DEFAULT_WINDOW_HEIGHT)) {
					currentSlideWidth = DEFAULT_WINDOW_WIDTH;
					currentSlideHeight = DEFAULT_WINDOW_HEIGHT;
					this.width = DEFAULT_WINDOW_WIDTH;
					this.height = DEFAULT_WINDOW_HEIGHT;
				}				
			}
			
			private function showUploadPresentationLabel(show:Boolean):void {
				if (!show) {		
					currentState = "";		
				} else {
					currentState = "dispUploadPresLabel";
				}				
			}

			private function gotoPreviousSlide():void {
				if ((slideView.selectedSlide - 1) >= 0)
					dispatchEvent(new PresenterCommands(PresenterCommands.GOTO_SLIDE, slideView.selectedSlide - 1));
			}
			
			private function gotoNextSlide():void {
				if ((slideView.selectedSlide + 1) < slideView.slides.length)
					dispatchEvent(new PresenterCommands(PresenterCommands.GOTO_SLIDE, slideView.selectedSlide + 1));
			}
			
			private function removeDecimalFromDataTip(val:String):String {			
                return val; 
            }
            
            private function showThumbnails():void{
            	slideView.thumbnailView.visible = !slideView.thumbnailView.visible;
            	setComponentsEnabled(!slideView.thumbnailView.visible);
				slideView.addEventListener(SlideView.THUMBNAILS_CLOSED, thumnailsClosed);
            }
            
            private function addOverlayCanvas(e:AddOverlayCanvasEvent):void{
            	slideView.acceptOverlayCanvas(e.canvas);
            	e.canvas.acceptOverlayCanvas(slideView);
            }
            
            /**
            * Adds a button to the toolbar. The button is added by external modules through the API.
            */
            private function addButton(e:AddButtonToPresentationEvent):void{
            	var button:IPresentationButton = e.button;
            	externalButtons.addItem(button);
 				this.presCtrlBar.addChild(button as Button);
 				button.buttonAdded(this);
            }
            
            /**
            * Sets the visibility of buttons added throught the Presentation API
            */
            private function setButtonsVisibility(visible:Boolean):void{
            	for (var i:int = 0; i<externalButtons.length; i++){
            		(externalButtons.getItemAt(i) as IPresentationButton).setButtonVisibility(visible);
            	}
            }
			
			/**
			 * Executed when the thumbnails viewer is closed
			 */
			private function thumnailsClosed(e:Event):void{
				slideView.removeEventListener(SlideView.THUMBNAILS_CLOSED, thumnailsClosed);
				setComponentsEnabled(true);
			}
            
            /**
            * Sets the enabled of buttons added throught the Presentation API
            */
            private function setComponentsEnabled(enabled:Boolean):void{
            	for (var i:int = 0; i<externalButtons.length; i++){
            		(externalButtons.getItemAt(i) as IPresentationButton).setComponentEnabled(enabled);
            	}
            }
			
			private function notifyComponentsOfPresenterChange(isPresenter:Boolean, presenterName:String):void{
				for (var i:int = 0; i<externalButtons.length; i++){
					(externalButtons.getItemAt(i) as IPresentationButton).presenterChanged(isPresenter, presenterName);
				}
			}
			
			public function getSlideView():SlideView{
				return this.slideView;
			}
			
			override protected function resourcesChanged():void{
				super.resourcesChanged();
				if ((slideView != null) && (!slideView.visible)) this.title = ResourceUtil.getInstance().getString('bbb.presentation.title');
			}
            
            /*****************************************************************************
            ;  switchFollowPreseterSlide
            ;----------------------------------------------------------------------------
            ; DESCRIPTION
            ;   This routine is use to switch viewer slide to follow presenter slide or not
			;	(Lock/Unlock).
            ;
            ; RETURNS
            ;
            ; INTERFACE NOTES
            ;
            ; IMPLEMENTATION
            ;       - change 'lock following presenter slide' status
            ;       - check 'lock following presenter slide' status to 
            ;         display or hide zoom slider and change button icon.
            ; HISTORY
            ; __date__ :        PTS:            Description
            ; 2011.01.04                        lock and unlock presentation slide
            ;                                   from presenter
			;
			; 2011.02.04						When unlocking the presentation, the 
			;									viewer should be able to view the document
			;									within the entire presentation Window.
            ;
            ******************************************************************************/
            private function switchFollowPreseterSlide() : void {
				var centerSlideEvent:cPPRESENT_CenterSlideEvent = new cPPRESENT_CenterSlideEvent(
														cPPRESENT_CenterSlideEvent.CENTER_SLIDE
														);
				if (null == centerSlideEvent){
					LogUtil.error("Creating cPPRESENT_CenterSlideEvent object is NULL");
					return;
				}
                slideView.switchFollowPreseterSlide();
				
                //check 'lock following presenter slide' status
                if (true == slideView.getFollowPresenterStatus()){
					
                    // change button icon and toolTip
                    lockButton.setStyle('icon',_lockedIcon);
                    lockButton.toolTip = ResourceUtil.getInstance().getString('bbb.presentation.unlockSlideWithPresenter');
                    // hide zoom slider and reset zoom button
                    zoomSlider.visible      = false;
                    btnResetZoom.visible    = false;
					if (null != slideView.slideLoader.content){
						this.slideView.showViewPort();
					}
					
                }else{
                    // change button icon and toolTip
                    lockButton.setStyle('icon',_unlockedIcon);
                    lockButton.toolTip = ResourceUtil.getInstance().getString('bbb.presentation.lockSlideWithPresenter');
                    // show zoom slider and reset zoom button
                    zoomSlider.visible      = true;
                    btnResetZoom.visible    = true;
					
					/**
					 *  enable the viewer can be able to view the document
					 *	within the entire presentation Window when unlocked.
					 * */
					dispatchEvent(centerSlideEvent);
                }
				
            }
            /**
             * END FUNCTION 'switchFollowPreseterSlide'
             **/
			
		    /*****************************************************************************
			;  handleNewPresentation
			;----------------------------------------------------------------------------
			; DESCRIPTION
			;   This routine is use to handle the new presentation window loaded
			;
			; RETURNS : N/A
			;
			; INTERFACE NOTES
			;       INPUT
			;           evt: cPPRESENT_PresenterViewEvent Event
			;
			; IMPLEMENTATION
			;		dispatch event to get presenter view port from the server
			;
			; HISTORY
			; __date__ :        PTS:            Description
			; 2011.3.02                        Enable full screen presentation
			;
			******************************************************************************/
			private function handleNewPresentation(evt:cPPRESENT_PresenterViewEvent) : void {
				if (true == this.maximized){
					return;
				}
				var presenterViewEvent:cPPRESENT_PresenterViewEvent = new cPPRESENT_PresenterViewEvent(
					cPPRESENT_PresenterViewEvent.GET_PRESENTER_VIEW_DIMENSION
				);
				if ( null == presenterViewEvent ){
					LogUtil.error("Creating cPPRESENT_PresenterViewEvent object is NULL");
					return;
				}
				if (true == _isPresentationLoaded){
					_isPresentationLoaded = false;
					dispatchEvent(presenterViewEvent);
				}
			}/** END Function : handleNewPresentation */
			
		]]>
	</mx:Script>

	<pres:states>
	    <!--http://stackoverflow.com/questions/369120/why-does-mxstates-have-trouble-being-resolved-to-a-component-implementation-->
        <mx:State name="dispUploadPresLabel">      
            <mx:AddChild relativeTo="{spacer1}" position="before">
                <mx:Label id="uploadPresentationLabel" visible="true" width="100%"
    	  			text="{ResourceUtil.getInstance().getString('bbb.presentation.clickToUpload')}"/>
            </mx:AddChild>
        </mx:State>		
	</pres:states>
    	 
	<mx:Fade id="thumbFadeIn" alphaFrom="1" alphaTo="0" duration="100" />
	<mx:Fade id="thumbFadeOut" alphaFrom="0" alphaTo="1" duration="100" />

		<thumb:SlideView id="slideView" width="100%" height="100%" visible="false" mouseDown="mouseDown = true" 
			mouseUp="mouseDown = false" verticalScrollPolicy="off" horizontalScrollPolicy="off" />
		    
    <mx:ApplicationControlBar id="presCtrlBar" width="100%" height="{CONTROL_BAR_HEIGHT}">
    	  <mx:Button id="uploadPres" icon="{uploadIcon}" visible="false" width="20" height="20"
    	   		toolTip="{ResourceUtil.getInstance().getString('bbb.presentation.uploadPresBtn.toolTip')}" 
    	   		click="dispatchEvent(new UploadEvent(UploadEvent.OPEN_UPLOAD_WINDOW))"/>     
          <mx:Button id="lockButton" icon="{_lockedIcon}" visible="false" width="30" height="20"
                  toolTip="{ResourceUtil.getInstance().getString('bbb.presentation.unlockSlideWithPresenter')}" click="switchFollowPreseterSlide()"/>
    	  <mx:Spacer width="50%" id="spacer1"/>
    	  <mx:Button id="backButton" icon="{backwardIcon}" visible="false" width="30" height="20"
    	   		toolTip="{ResourceUtil.getInstance().getString('bbb.presentation.backBtn.toolTip')}" click="gotoPreviousSlide()"/>
    	  <mx:Button id="btnSlideNum" visible="false" label="" click="showThumbnails()" doubleClick="showPageDialog()" 
					 toolTip="{ResourceUtil.getInstance().getString('bbb.presentation.slideNumLbl.toolTip')}"/>
    	  <mx:Button id="forwardButton" icon="{forwardIcon}" visible="false" width="30" height="20"
    	   		toolTip="{ResourceUtil.getInstance().getString('bbb.presentation.forwardBtn.toolTip')}" click="gotoNextSlide()"/>    				
		<mx:Spacer width="10%" id="spacer2"/>
    	<mx:HSlider id="zoomSlider" visible="false"
    		minimum="100" maximum="400" value="100" dataTipPlacement="top" labels="['100%','400%']" 
    		useHandCursor="true" snapInterval="5" allowTrackClick="true" liveDragging="true" 
    		dataTipFormatFunction="removeDecimalFromDataTip" change="onSliderZoom()" width="100"/>
    	<mx:Spacer width="50%" id="spacer3"/>
    	<!--containers:Docker id="toolbarDocker" height="100%" width="250" visible="{isPresenter}" /-->
    	<mx:Button id="btnResetZoom" icon="{magnifierIcon}" visible="false" width="20" height="20" 
    		toolTip="{ResourceUtil.getInstance().getString('bbb.presentation.resetZoomBtn.toolTip')}" click="onResetZoom()"/>
    	<mx:Spacer width="5" id="spacer4"/>
    </mx:ApplicationControlBar>
</pres:MDIWindow>
